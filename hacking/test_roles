#!/usr/bin/env bash
OW=$(pwd)
cd "$(dirname ${0})/.."
export LOGGER_NAME=$(basename $0)


sc=hacking/build_env
[[ ! -e $sc ]] && echo "missing $sc" >&2
. "$sc" || exit 1

usage () {
    NO_HEADER=y die '
Test script for ansible roles in ./roles or arbitrary rolepath
against a set of docker \$IMAGES.

 [COPS_DOCKER_TEST_MODE=build/run] \
 [COPS_DOCKER_CMD="/entry_point"] \
 [NO_CLEANUP=] \
 [NO_TESTS_OUTPUT=] \
 [NO_FORCE_USER_TAG=] \
 [IMAGES=xxx] \
 [ROLES_TO_TEST=]\
 [NOT_IN_DOCKER=]
 [ROLE_DOCKERFILE_TEMPLATE=xxx]
 [NOCOLOR=y] \
 [DEBUG=y] \
    '"$0" [role1] [role2]'
'
}

parse_cli() {
    parse_cli_common "${@}"
}

parse_cli "$@"

failed_roles=""
success_roles=""
role_num=0

tmp_files=""
tmp_dockers=""
tmp_imgs=""

post_tests_cleanup() {
    if [[ -n "${NO_CLEANUP}" ]]; then
        log "Skip Post tests cleanup"
    else
        vvv do_tmp_cleanup "${tmp_files}" "${tmp_dockers}" "${tmp_imgs}"
    fi
}

dockerfile_template() {
    role=$1
    t="${role}/Dockerfile.test"
    if [ -e "$t" ];then
        r="$t"
    else
        r="${ROLE_DOCKERFILE_TEMPLATE}"
    fi
    echo "$r"
}

testscript_template() {
    role=$1
    t="${role}/testcript"
    if [ -e "$t" ];then
        r="$t"
    else
        r="${ROLE_TESTSCRIPT_TEMPLATE}"
    fi
    echo "$r"
}

rewrite_role_file() {
    local cops_root=${COPS_ROOT}
    local role_num=$((role_num+1))
    local image="${1}"
    local role="${2}"
    local rolename="$(basename $role)"
    local template="${3}"
    local role_script="${4}"
    local rolesd=$( basename "${roles_wd}" )
    if [[ -n ${NOT_IN_DOCKER} ]]; then
        cops_root=${W}
    fi
    rewrite_dockerfile "${template}" "${image}" "${cops_root}" |\
        sed -r\
        -e "s|__ROLE_SCRIPT__|${role_script}|g" \
        -e "s|__ROLEPATH__|${role}|g" \
        -e "s|__ROLENAME__|${rolename}|g"\
        -e "s|__ROLE_NUM__|${role_num}|g"
}

test_role() {
    image="${1}"
    role="${2}"
    if echo "${role}" | egrep -vq '^/'; then
        if test -d "${OW}/${role}"; then
            role="${OW}/${role}"
        elif test -d "${OW}/roles/${role}"; then
            role="${OW}/roles/${role}"
        elif test -d "${W}/roles/${role}"; then
            role="${W}/roles/${role}"
        fi
    fi
    if ! test -d ${role}; then
        log "non existing role: ${role}"
        return 1
    else
        role=$(echo "${role}" | sed -e 's#/\+$##g')
    fi
    rolename="$(basename ${role})"
    dockerfile="$(dockerfile_template $role)"
    testscript="$(testscript_template $role)"
    tmpstr=$(get_random_slug 8)
    tmpdockerfile=${role}/dockerfile.testtmp.${tmpstr}
    tmptestscript=${role}/testscript.testtmp.${tmpstr}
    raw_test_tag=$(basename ${tmpdockerfile}):copstest
    raw_test_tag=${raw_test_tag//*dockerfile.testtmp./${rolename}}
    test_tag=$(cleanup_docker_tag $raw_test_tag)
    docker_test_tag=copstest_${tmpstr}
    pimg="$(may_prepend_docker_user_to_image \
        $(add_preprovision_slug $image))"
    local rret=$?
    tmp_files="${tmp_files} ${tmpdockerfile} ${tmptestscript}"
    vv rewrite_role_file \
        "${image}" "${role}" "${testscript}" "${tmptestscript}"\
        > "${tmptestscript}"
    chmod +x "${tmptestscript}"
    if [[ ${rret} == 0 ]]; then
        if ! ( echo "${image}" | egrep -q "\/system"; ); then
            if [[ "${COPS_DOCKER_TEST_MODE}" == "build" ]];then
                vv rewrite_role_file \
                    "${image}" "${role}" "${dockerfile}" "${tmptestscript}"\
                    > "${tmpdockerfile}"
                tmp_imgs="${tmp_imgs} ${test_tag}"
                vv docker build -t ${test_tag} -f ${tmpdockerfile} ${role}
                rret=${?}
            else
                tmp_dockers="${tmp_dockers} ${docker_test_tag}"
                docker=$(get_command docker)
                local cmd=${COPS_DOCKER_CMD:-${COPS_DOCKER_INIT_CMD}}
                local args=
                if echo $image | egrep "ubuntu$|ubuntu.*14.04";then
                    args=${COPS_DOCKER_CMD:-${COPS_DOCKER_SHELL_CMD}}
                    cmd=${COPS_DOCKER_SHELL}
                fi
                vv sudo "$docker" run -ti --privileged -d --name="$docker_test_tag" \
                    -v "/sys/fs/cgroup:/sys/fs/cgroup:ro" \
                    -v "/var/lib/docker:/var/lib/docker" \
                    -v "/var/run/docker:/var/run/docker" \
                    -v "/var/run/docker.sock:/var/run/docker.sock" \
                    -v "${COPS_ROOT}:${COPS_ROOT}.orig:ro" \
                    -v "${role}:${role}.orig:ro" \
                    "${image}" ${cmd} "${args}" > /dev/null
                if [[ $? != 0 ]];then
                    log "$image failed to spawn"
                    return 1
                else
                    sleep 1
                fi
                vvv docker exec "$docker_test_tag" bash -c "printf ''"
                if [[ $? != 0 ]];then
                    log "${docker_test_tag}@${image} doest accept commands"
                    return 1
                fi
                vvv docker exec \
                    -e IMAGES="$IMAGES" \
                    -e ROLEPATH="$role" \
                    -e COPS_ROOT="$COPS_ROOT" \
                    "$docker_test_tag" \
                    bash -c "\
                    for i in "'"'"\$ROLEPATH"'"'";do
                        if [ ! -e "\${i}" ];then
                            mkdir -p "'"'"\${i}"'"'"
                        fi &&
                        if [ -e "'"'"\${i}.orig"'"'" ];then
                            rsync -a --delete \
                               "'"'"\${i}.orig"'"'"/ "'"'"\${i}"'"'"/
                        fi
                    done &&
                    ${tmptestscript}"
                rret=${?}
            fi
        else
            ( \
                export ROLEPATH="$role";\
                export COPS_ROOT="$COPS_ROOT";\
                cd "${role}" && ${tmptestscript} )
            rret=${?}
        fi
    fi
    return ${rret}
}

get_roles_to_test() {
    image="${1:-ubuntu}"
    shift
    roles_to_tests=${@:-${ROLES_TO_TEST-}}
    if [[ -z ${roles_to_tests} ]];then
        roles_to_tests="${BASE_ROLES} ${CONFIG_ROLES} ${SERVICES_ROLES}"
        if echo $image | egrep -iq "debian|ubuntu"; then
            roles_to_tests="${roles_to_tests} ${DEBIAN_ROLES}"
        fi
        if echo $image | egrep -iq "ubuntu"; then
            roles_to_tests="${roles_to_tests} ${UBUNTU_ROLES}"
        fi
    fi
    echo "${roles_to_tests}" | xargs -n1 | sort -u
}

ret=0
if [[ -n $NOT_IN_DOCKER ]];then
    IMAGES=system
fi
while read image_line;do
    for image in ${image_line};do
        image=$(may_prepend_docker_user_to_image ${image})
        roles_to_tests=$(get_roles_to_test ${image} $@)
        log "Image: ${image}"
        log "  Testing: ${roles_to_tests}"
        # XXX We can make this parralel to speed up builds
        for role in ${roles_to_tests};do
            test_slug=${image}::${role}
            ( do_trap post_tests_cleanup EXIT;
              NO_OUTPUT=${NO_TESTS_OUTPUT-${TRAVIS-}} output_in_error \
                 test_role ${image} ${role}; )
            if [[ $? != 0 ]];then
                ret=1
                log "test failure: ${YELLOW}${test_slug}"
                failed_roles="${failed_roles} ${test_slug}"
            else
                log "test success: ${YELLOW}${test_slug}"
                success_roles="${success_roles} ${test_slug}"
            fi
        done
    done
done <<< ${IMAGES}
if [[ -n ${success_roles} ]];then
    log "success roles:${YELLOW}${success_roles}"
fi
if [[ -n ${failed_roles} ]];then
    log "failed roles:${YELLOW}${failed_roles}"
fi
exit ${ret}
# vim:set et sts=4 ts=4 tw=80:

#!/usr/bin/env bash
OW=$(pwd)
cd "$(dirname ${0})/.."
export LOGGER_NAME=$(basename $0)


sc=hacking/build_env
[[ ! -e $sc ]] && echo "missing $sc" >&2
. "$sc" || exit 1

usage () {
    NO_HEADER=y die '
Test script for ansible roles in ./roles or arbitrary rolepath
against a set of docker \$IMAGES.

 [COPS_DOCKER_TEST_MODE=build/run] \
 [COPS_DOCKER_CMD="/entry_point"] \
 [NO_CLEANUP=] \
 [NO_TESTS_OUTPUT=] \
 [NO_FORCE_USER_TAG=] \
 [IMAGES=xxx] \
 [ROLES_TO_TEST=]\
 [NOT_IN_DOCKER=]
 [SYNC_CORPUSOPS=y] \
 [ROLE_TESTSCRIPT_TEMPLATE=xxx]
 [NOCOLOR=y] \
 [DEBUG=y] \
    '"$0" [role1] [role2]'
'
}

parse_cli() {
    parse_cli_common "${@}"
}

parse_cli "$@"

failed_roles=""
success_roles=""
role_num=0

tmp_files=""
tmp_dockers=""
tmp_imgs=""

post_tests_cleanup() {
    if [[ -n "${NO_CLEANUP}" ]]; then
        log "Skip Post tests cleanup"
    else
        vvv do_tmp_cleanup "${tmp_files}" "${tmp_dockers}" "${tmp_imgs}"
    fi
}

testscript_template() {
    role=$1
    t="${role}/testcript"
    if [ -e "$t" ];then
        r="$t"
    else
        r="${ROLE_TESTSCRIPT_TEMPLATE}"
    fi
    echo "$r"
}

test_role() {
    local rret=0
    image="${1}"
    while read role;do
        if [[ -n $role ]];then
            if echo "${role}" | egrep -vq '^/'; then
                if test -d "${OW}/${role}"; then
                    role="${OW}/${role}"
                elif test -d "${OW}/roles/${role}"; then
                    role="${OW}/roles/${role}"
                elif test -d "${W}/roles/${role}"; then
                    role="${W}/roles/${role}"
                fi
            fi
            role=$(echo "${role}" | sed -e 's#/\+$##g')
            roles="$(printf "$roles\n$role\n" | xargs -n1)"
            if ! test -d ${role}; then
                log "non existing role: ${role}"
                return 1
            fi
        fi
    done <<< "${ROLEPATHS-}"
    testscript="$(testscript_template $role)"
    tmpstr=$(get_random_slug 8)
    docker_test_tag=copstest_${tmpstr}
    pimg="$(may_prepend_docker_user_to_image \
        $(add_preprovision_slug $image))"
    if ! ( echo "${image}" | egrep -q "\/system"; ); then
        tmp_dockers="${tmp_dockers} ${docker_test_tag}"
        docker=$(get_command docker)
        local cmd=${COPS_DOCKER_CMD:-${COPS_DOCKER_INIT_CMD}}
        local args=
        if echo $image | egrep -q "ubuntu$|ubuntu.*14.04";then
            args=${COPS_DOCKER_CMD:-${COPS_DOCKER_SHELL_CMD}}
            cmd=${COPS_DOCKER_SHELL}
        fi
        vv sudo "$docker" run -ti --privileged -d --name="$docker_test_tag" \
            -e PYTHONUNBUFFERED=${PYTHONUNBUFFERED-1} \
            -e ANSIBLE_FORCE_COLOR=${ANSIBLE_FORCE_COLOR-true} \
            -e COPS_ROOT="$COPS_ROOT" \
            -e IMAGES="$IMAGES" \
            -e COPS_TESTSCRIPT="$testscript" \
            -e ROLEPATHS="$roles" \
            -v "/sys/fs/cgroup:/sys/fs/cgroup:ro" \
            -v "/var/lib/docker:/var/lib/docker" \
            -v "/var/run/docker:/var/run/docker" \
            -v "/var/run/docker.sock:/var/run/docker.sock" \
            -v "$W:$COPS_ROOT.orig" \
            $(\
                while read r;do
                    echo "-v"
                    echo "$r:$r.orig:ro"
                done < <(printf "$roles\n$testscript"|xargs -n1); ) \
            "${image}" ${cmd} "${args}" > /dev/null
        if [[ $? != 0 ]];then
            log "$image failed to spawn"
            return 1
        else
            sleep 1
        fi
        vvv docker exec "$docker_test_tag" bash -c "printf ''"
        if [[ $? != 0 ]];then
            log "${docker_test_tag}@${image} does not accept commands"
            return 1
        fi
        # inject code in docker image (read/write)
        vvv docker exec -t "$docker_test_tag" bash -c '
            while read i;do
                if [ -d "$i.orig" ] && [ ! -e "$i" ];then
                    mkdir -p "$i"
                fi && \
                if [ -e "${i}.orig" ];then
                    d="$i.orig"
                    e="$i"
                    if [ -d "$d" ];then
                        d="${d}/"
                        e="${e}/"
                    fi
                    rsync -a --delete "${d}" "${e}"
                fi
            done < <( printf "$ROLEPATHS\n$COPS_TESTSCRIPT\n"|xargs -n1; )'
        if [[ $rret == 0 ]] && [[ -n "${SYNC_CORPUSOPS:-y}" ]];then
            vvv docker exec -t "$docker_test_tag" bash -c '
                if [ -e "${COPS_ROOT}.orig" ];then
                    rsync -av --delete "${COPS_ROOT}.orig/" "${COPS_ROOT}/" \
                        --exclude=venv/{bin,include,lib,local,man}
                fi'
        fi
        rret=$?
        if [[ $rret == 0 ]];then
            vvv docker exec "$docker_test_tag" bash -c '
                chmod +x $COPS_TESTSCRIPT && ${COPS_TESTSCRIPT}'
            rret=${?}
        fi
    else
        chmod +x "$testscript" &&\
        ( \
            export ROLEPATHS="$roles";\
            export COPS_ROOT="$COPS_ROOT";\
            cd "${role}" && ${testscript}; )
        rret=${?}
    fi
    return ${rret}
}

get_roles_to_test() {
    image="${1:-ubuntu}"
    shift
    roles_to_tests=${@:-${ROLES_TO_TEST-}}
    if [[ -z ${roles_to_tests} ]];then
        roles_to_tests="${BASE_ROLES} ${CONFIG_ROLES} ${SERVICES_ROLES}"
        if echo $image | egrep -iq "debian|ubuntu"; then
            roles_to_tests="${roles_to_tests} ${DEBIAN_ROLES}"
        fi
        if echo $image | egrep -iq "ubuntu"; then
            roles_to_tests="${roles_to_tests} ${UBUNTU_ROLES}"
        fi
    fi
    echo "${roles_to_tests}" | xargs -n1 | uniq
}

ret=0
if [[ -n $NOT_IN_DOCKER ]];then
    IMAGES=system
fi
while read image_line;do
    for image in ${image_line};do
        tdate=$(date '+%F %T')
        image=$(may_prepend_docker_user_to_image ${image})
        roles_to_test=$(get_roles_to_test ${image} $@)
        sroles_to_test=$(echo ${roles_to_test})
        test_slug="$image::'$sroles_to_test'"
        log "Test (start:$tdate): $test_slug"
        ( export ROLEPATHS=$roles_to_test;
          do_trap post_tests_cleanup EXIT;
          NO_OUTPUT=${NO_TESTS_OUTPUT-${TRAVIS-}} output_in_error \
              test_role ${image}; )
        tret=$?
        log "Test (end:$tdate, rc:$tret): $test_slug"
        if [[ ${tret} != 0 ]];then
            ret=1
            failed_roles="${failed_roles} ${test_slug}"
        else
            success_roles="${success_roles} ${test_slug}"
        fi
    done
done <<< ${IMAGES}
if [[ -n ${success_roles} ]];then
    log "success roles suite:${YELLOW}${success_roles}"
fi
if [[ -n ${failed_roles} ]];then
    log "failed roles suite:${YELLOW}${failed_roles}"
fi
exit ${ret}
# vim:set et sts=4 ts=4 tw=80:

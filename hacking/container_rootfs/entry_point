#!/usr/bin/env bash
set -ex
C=$(pwd)
W=${COPS_ROOT:-/srv/corpusops/corpusops.bootstrap}
R=$W/hacking/container_rootfs
IMG_DEBUG=${IMG_DEBUG-}
IMG_NOQUIET=${IMG_NOQUIET-${IMG_DEBUG}}
IMG_QUIET=${IMG_QUIET}
DEFAULT_SYSTEMD_LOGTARGET=console
DEFAULT_SYSTEMD_LOGLEVEL=info
if [[ -n ${IMG_NOQUIET} ]];then
    DEFAULT_SYSTEMD_LOGLEVEL=debug
fi
SYSTEMD_LOGTARGET=${SYSTEMD_LOGTARGET:-"$DEFAULT_SYSTEMD_LOGTARGET"}
SYSTEMD_LOGLEVEL=${SYSTEMD_LOGLEVEL:-${DEFAULT_SYSTEMD_LOGLEVEL}}
SYSTEMD_SHOWSTATUS=${SYSTEMD_SHOWSTATUS:-1}
DEFAULT_SYSTEMD_ARGS="--system --show-status=$SYSTEMD_SHOWSTATUS"
DEFAULT_SYSTEMD_ARGS="$DEFAULT_SYSTEMD_ARGS --log-target=$SYSTEMD_LOGTARGET"
DEFAULT_SYSTEMD_ARGS="$DEFAULT_SYSTEMD_ARGS --log-level=$SYSTEMD_LOGLEVEL"
SYSTEMD_ARGS="${SYSTEM_ARGS:-$DEFAULT_SYSTEMD_ARGS}"
/sbin/cops_container_disable_networkifacesscripts.sh
if [[ -n ${CORPUSOPS_IN_DEV-} ]];then
    if [ -e "${R}" ];then
        rsync -av $R/ /
    fi
fi

exec_systemd_flag=(mktemp)
rm -f "$exec_systemd_flag"
testoldsysd() {
    if ( cat - | grep -iq "unless pid 1" );then
        echo "systemd requires exec" >&2
        touch "$exec_systemd_flag"
    fi
}
if [ -e /sbin/init ] && \
    ( /sbin/init --version 2>&1 | grep -iq upstart; ) ;then
    exec /sbin/init
else
    # try to use systemd non exec(d (pre bionic way that
    # doesnt support exec for some reason)
    set +e
    (((( /lib/systemd/systemd $SYSTEMD_ARGS 2>&1 ;\
        echo $? >&3) | testoldsysd >&4) 3>&1) | (read xs; exit $xs)) 4>&1
    ret=$?
    if [ -e "$exec_systemd_flag" ];then
        echo "Restarting systemd with exec" >&2
        exec /lib/systemd/systemd $SYSTEMD_ARGS
    else
        # other cases, error out
        exit $ret
    fi
fi
# vim:set et sts=4 ts=4 tw=80:

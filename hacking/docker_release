#!/usr/bin/env bash
cd "$(dirname ${0})/.."
export LOGGER_NAME=$(basename $0)

sc=hacking/build_env
[[ ! -e $sc ]] && echo "missing $sc" >&2
. "$sc" || exit 1

usage() {
    NO_HEADER=y die '
Release images to docker

 [FORCE_NO_RELEASE=] \
 [FORCE_RELEASE=] \
 [DOCKER_RELEASER=xxx] \
 [DOCKER_PASSWORD=xxx] \
 [RELEASABLE_BRANCHES=xxx] \
 [DOCKER_USER=xxx] \
 [NOCOLOR=y] \
 [DEBUG=y] \
    '"$0"' WORKING_DIR <image> <image1>
 '
}

parse_cli() {
    [[ -z $DOCKER_RELEASER ]] && die "no DOCKER_RELEASER"
    [[ -z $DOCKER_PASSWORD ]] && die "no DOCKER_PASSWORD"

    if [[ -n ${1-} ]] && [ -d "${1}" ]; then
        RELEASED_DIR=${1}
        shift
    else
        RELEASED_DIR=${W}
    fi
    R_IMAGES="${@:-"${IMAGES}"}"
    R_IMAGES="$(echo "$R_IMAGES"|xargs -n1|awk '!seen[$0]++')"
    RELEASABLE=""
    for img in ${R_IMAGES};do
        fimg=${img}
        if echo ${fimg} | grep -vq /;then
            if [[ -z $DOCKER_USER ]];then
                die "no DOCKER_USER for $fimg"
            else
                fimg=${DOCKER_USER}/${img}
            fi
        fi
        tagid=$(get_image "${fimg}")
        if [ "x${tagid}" != "x" ]; then
            RELEASABLE="${RELEASABLE} ${fimg}"
        fi
    done
    RELEASABLE="$(echo "${RELEASABLE}" | xargs -n1)"
    RELEASABLE_BRANCHES="${RELEASABLE_BRANCHES:-"^master$"}"
    if [[ -z "${RELEASABLE}" ]]; then
        die "no releasable images produced yet from: ${YELLOW}$IMAGES"
    fi
}

release_test() {
    if [[ -n ${TRAVIS} ]]; then
        if [[ "${TRAVIS_PULL_REQUEST}" != "false" ]];then
            debug "Is a travis pull request, no release"
            return 1
        elif echo "${TRAVIS_BRANCH}"\
            | egrep -iq ${RELEASABLE_BRANCHES}; then
            return 0
        fi
    else
        if [[ -n ${FORCE_RELEASE} ]]; then
            return 0
        elif get_git_branch ${RELEASED_DIR}\
            | egrep -iq ${RELEASABLE_BRANCHES}; then
            return 0
        fi
    fi
    return 1
}

parse_cli "$@"
ret=0
if release_test; then
    log "Releasing ${RELEASABLE}"
    for img in ${RELEASABLE};do
        docker_registry=
        # registry
        image_pattern="\(\([^:]\+:[^/]\+\)\/\)\?"
        # repo
        image_pattern="${image_pattern}\(\(\([^\/:]\+\)\/\?\)"
        # image
        image_pattern="${image_pattern}\(\(\([^\/:]\+\)\/\?\)"
        # tag
        image_pattern="${image_pattern}:\?\(.*\)\)\)$"
        img_without_registry=$(echo "$img"|sed -e "s/$image_pattern/\3/g")
        docker_registry=$(echo "$img"|sed -e "s/$image_pattern/\2/g")
        vecho="";if [[ -n $FORCE_NO_RELEASE ]];then vecho="echo";fi
        if [[ -n $docker_registry ]];then
            log "docker login -> ${docker_registry}"
        else
            log "docker login"
        fi
        $vecho docker login -u="$DOCKER_RELEASER"  -p="$DOCKER_PASSWORD" \
            $([[ -n ${docker_registry} ]] && echo "${docker_registry}")
        die_in_error "Login for $DOCKER_RELEASER failed on $docker_registry"
        ( if [[ -n "${docker_registry}" ]];then \
            $vecho vv \
            docker push "${docker_registry}"/"${img_without_registry}";\
        else \
            $vecho \
            vv docker push "${img_without_registry}";\
        fi
        )
        if [[ ${?} != 0 ]];then
            log "Failed to release: ${img}"
            ret=1
        else
            log "Released: ${img}"
        fi
    done
    log "release done"
else
    log "Release test failed, release skipped"
fi
die_in_error_ ${ret} "Release failed ($ret)"
# vim:set et sts=4 ts=4 tw=80:

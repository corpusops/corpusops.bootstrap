#!/usr/bin/env bash


COPS_VAGRANT_DIR=${COPS_VAGRANT_DIR:-$(dirname "$(readlink -f "$0")")}

W=${W:-$COPS_VAGRANT_DIR/../..}
. "$COPS_VAGRANT_DIR/common.sh" || exit 1
cd "$W"

actions="+(help"
actions="${actions}|halt|stop|down"
actions="${actions}|start|up|fire"
actions="${actions}|ssh|sshgen"
actions="${actions}|import|export"
actions="${actions}|mount|umount"
actions="${actions})"
UNAME="${UNAME-$(uname)}"
DEFAULT_SSHFS_ALLOW_OTHER="${SSHFS_ALLOW_OTHER-' allow_other'}"
DEFAULT_SSHFS_OPTS="transform_symlinks,reconnect,BatchMode=yes,nonempty"
DEFAULT_SSHFS_OSX_OPTS="defer_permissions,Compression=no"
DEFAULT_SSHFS_OSX_OPTS="${DEFAULT_SSHFS_OSX_OPTS},noappledouble,no_readahead"
DEFAULT_SSHFS_OSX_OPTS="${DEFAULT_SSHFS_OSX_OPTS},negative_vncache,auto_cache"


do_help() {
    $1_usage || usage
}


sanitize() {
    echo $@  | sed -r\
        -e "s/[ :_éàèçù\*]//g" \
        -e "s/[ \/\\]/-/g"
}


cleanup_import_box() {
    if [[ -n "${NO_BOX_CLEANUP}" ]];then
        log "NO_BOX_CLEANUP set, skip box cleanup for ${boximportname}"
        return 0
    fi
    if vagrant box list | egrep -q "$boximportname";then
        vv vagrant box remove --force "${boximportname}"
    fi
}


do_ssh() {
    do_sshgen
    ssh -F .vagrant/cops-sshconfig vagrant "${@}"
}


do_sshgen() {
    if [ ! -e .vagrant ];then mkdir .vagrant;fi
    vagrant ssh-config | sed \
        -e "s/User .*/User root/g" \
        -e "s/Host .*/Host vagrant/g" > .vagrant/cops-sshconfig
    if ! ( grep -q "Host vagrant" .vagrant/cops-sshconfig );then
        echo "pb with vagrant-sshconfig" >&2
        exit 1
    fi
}

os_is() {
    echo "$UNAME" | egrep -q $2
}


do_mount() {
    sshfs_opts="${SSHFS_OPTS:-${DEFAULT_SSHFS_OPTS}}"
    if egrep -q "^user_allow_other" /etc/fuse.conf 2>/dev/null;then
        sshfs_opts="$sshfs_opts ${SSHFS_ALLOW_OTHER:-${DEFAULT_SSHFS_ALLOW_OTHER}}"
    fi
    if os_is Darwin;then
        sshfs_opts="$sshfs_opts ${SSHFS_OSX_OPTS:-${DEFAULT_SSHFS_OSX_OPTS}}"
    fi
    if [ ! -e "${VM_MOUNTPOINT}" ];then
        mkdir -p "${VM_MOUNTPOINT}"
    fi
    if [ ! -e "${VM_MOUNTPOINT}/bin" ];then
        do_sshgen \
            && vv sshfs \
            -F "$(pwd)/.vagrant/cops-sshconfig" \
            $sshfs_opts \
            vagrant:/ "${VM_MOUNTPOINT}"
        die_in_error "Error while mounting"
    else
        log "VM is already mounted"
    fi
}


do_umount() {
    if [ -e "$VM_MOUNTPOINT/bin" ];then
        vv fusermount -u "${VM_MOUNTPOINT}"
        die_in_error "Error while umounting"
    else
        log "$PWD not mounted"
    fi
}


do_up() {
    vagrant up $@
    die_in_error "Error while starting"
    do_mount
    die_in_error "Error while mounting"
}


do_down() {
    do_umount
    die_in_error "Error while mounting"
    vagrant halt -f
    die_in_error "Error while stopping"
}


do_import() {
    BOX=${BOX:-${1}}
    shift
    if [ -z "${BOX}" ];then
        die "give a box file"
    fi
    if [ ! -e ${BOX} ];then
        die "provide a valid box file"
    fi
    if [ -e .vagrant ];then
        if [ "x$(find .vagrant/ -type f)" != "x" ];then
            log ".vagrant boxes exists, bailing out"
            die "..."
        fi
    fi
    boximportname=cops_$(sanitize $PWD)
    vv vagrant box add --force "${boximportname}" "${BOX}" $@
    die_in_error "vagrant box import from $BOX failed"
    if [ ! -e vagrant_config.yml ];then
        echo "---">>vagrant_config.yml
    fi
    dcfg=$(find ~/.vagrant*/"boxes/${boximportname}" \
        -name vagrant_config.yml 2>/dev/null | head -n1)
    echo $dcfg
    if [[ -n "${dcfg}" ]] && [ -f "${dcfg}" ];then
        vv cp -f "${dcfg}" vagrant_config.yml
    else
        echo >> vagrant_config.yml
    fi
    sed -i "/(BOX|BOX_URI)/d" vagrant_config.yml
    cat >> vagrant_config.yml << EOF
BOX: ${boximportname}
BOX_URI: file://$(readlink -f ${BOX})
EOF
    vagrant up
    die_in_error "vagrant import from $BOX failed"
    # we cant as the ssh key is contained inside !
    # cleanup_import_box
}


do_export() {
    BOX=${BOX:-${1}}
    shift
    if [ -z "${BOX}" ];then
        die "give a box name"
    fi
    if vagrant status | egrep -q running;then
        die "Vagrant is running, poweroff VMs first with: vagrant halt -f"
    fi
    vv vagrant package --output "${BOX}.box" \
        $([[ -f vagrant_config.yml ]] $@ && \
                echo --include vagrant_config.yml ; )
    die_in_error "vagrant export to $BOX failed"
}


usage() {
    NO_HEADER=y die '
Wrapper to control vm

    '"$0 $actions "'
    - mount: mount the vm inside local/mountpoint
    - umount: umount the vm
    - down: umount & stop vm
    - up: start & mount vmzz
    - export: export vm to a file
    - import: import vm from a file
    - ssh: ssh into the vm
    - sshgen: generate ssh client file .vagrant/cops-sshconfig
    - help [command]: specific command help
    - (any other arguments): proxy the arguments to vagrant
'
}


sshgen_usage() {
    NO_HEADER=y die '
Generate .vagrant/cops-sshconfig: ssh client config file to access the vagrant vm

    '"$0 $action"'
'
}


ssh_usage() {
    NO_HEADER=y die '
SSH client wrapper (go as root inside the VM)

    '"$0 $action"'
'
}


umount_usage() {
    NO_HEADER=y die '
Umount a vagrant vm

    '"$0 $action"'
'
}


mount_usage() {
    NO_HEADER=y die '
Mount a vagrant vm using sshfs to local/mountpoint

    '"$0 $action"'
'
}


down_usage() {
    NO_HEADER=y die '
Umount and stop the vm

    '"$0 $action"'
'"$(vagrant halt --help)"
}


up_usage() {
    NO_HEADER=y die '
Start and mount the vm

    '"$0 $action"'
'"$(vagrant up --help)"

}


export_usage() {
    NO_HEADER=y die '
Export a vagrant vm

    '"$0"' toto
'"$(vagrant package --help|egrep -v -- '--(base|help|output)')"
}


import_usage() {
    NO_HEADER=y die '
    [BOX=] \
[NO_BOX_CLEANUP=] \
Import a vagrant vm

    '"$0 $action"' toto.box
'"$(vagrant box add --help|egrep -v -- '--(name|help)')"
}


help_usage() {
    NO_HEADER=y die '
Specific help

    '"$0 $action"'
'
}


parse_usage() {
    for a in $@;do
        case $a in
            -h|-l|--help)
                case $action in
                    halt|stop|down) down_usage $@;;
                    start|up|fire) up_usage $@;;
                    $actions) ${action}_usage;;
                    *) usage;;
                esac
        esac
    done
}


main() {
    action=$1
    shift
    parse_usage $action $1
    case $action in
        halt|stop|down) do_down $@;;
        start|up|fire) do_up $@;;
        $actions) do_$action $@;;
        *) vagrant "$action" "$@";;
    esac
}
main $@
# vim:set et sts=4 ts=4 tw=80:

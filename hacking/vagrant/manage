#!/usr/bin/env bash
readlinkf() {
    if ( uname | egrep -iq "linux|darwin|bsd" );then
        if ( which greadlink 2>&1 >/dev/null );then
            greadlink -f "$@"
        elif ( which perl 2>&1 >/dev/null );then
            perl -MCwd -le 'print Cwd::abs_path shift' "$@"
        elif ( which python 2>&1 >/dev/null );then
            python -c 'import os,sys;print(os.path.realpath(sys.argv[1]))' "$@"
        fi
    else
        readlink -f "$@"
    fi
}
W=${W:-$(cd "$(dirname $0)" && pwd)}
COPS_VAGRANT_DIR=${COPS_VAGRANT_DIR:-$(dirname "$(readlinkf "$0")")}


. "$COPS_VAGRANT_DIR/common.sh" || exit 1
cd "$W"

actions="+(help"
actions="${actions}|halt|stop|down|destroy"
actions="${actions}|start|up|fire|provision"
actions="${actions}|ssh|sshgen"
actions="${actions}|import|export"
actions="${actions}|mount|umount"
actions="${actions}|status"
actions="${actions})"


do_help() {
    $1_usage || usage
}


sanitize() {
    echo ${@}  | sed \
        -e "s/[ :_éàèçù\*]//g" \
        -e "s/[ \/\\]/-/g"
}


status_() {
    vagrant status 2> /dev/null
}


long_status() {
    status_\
        | grep -i "(virtualbox)"\
        | grep -v grep\
        | grep -v provider\
        | grep -i virtualbox\
        | sed -e "s/\([ ^\t]\)*[(].*//g"\
        | sed -e "s/\([ \t]\)*$//g"\
        | sed -e "s/^\([ \t]\)*//g" | while read hostline;do
        if [ "x${@}" != "x" ];then
            for h in ${@};do
                host=$(echo ${hostline}|awk '{print $1}')
                hstatus=$(echo ${hostline}|awk '{print $2}')
                if [ "x${host}" = "x${h}" ];then echo "${h} ${hstatus}";fi
            done
        else
            echo "${hostline}"
        fi
    done
}


is_running() {
    local i=""
    for i in $(default_to_all_hosts ${@});do
        if status $i | grep -vq running;then
            return 1
        fi
    done
    return 0
}


all_hosts() {
    long_status ${@} | awk '{print $1}'
}


first_host() {
    if [ "x${FIRST_HOST}" = "x" ];then
        FIRST_HOST=$(all_hosts| head -n 1)
    fi
    echo ${FIRST_HOST}
}


all_running_hosts() {
    long_status ${@} | grep running | awk '{print $1}'
}


first_running_host() {
    all_running_hosts ${@} | head -n 1
}


default_to_first_host() {
    if [ "x${1}" = "x" ];then
        echo $(first_host)
    else
        echo "${1}"
    fi
}


default_to_all_hosts() {
    if [ "x${1}" = "x" ];then
        echo $(all_hosts)
    else
        echo "${1}"
    fi
}


do_status() {
    vagrant status "${@}" 2>/dev/null
}


cleanup_import_box() {
    if [[ -n "${NO_BOX_CLEANUP}" ]];then
        log "NO_BOX_CLEANUP set, skip box cleanup for ${boximportname}"
        return 0
    fi
    if vagrant box list | egrep -q "$boximportname";then
        vv vagrant box remove --force "${boximportname}"
    fi
}


do_ssh_() {
    local host=$(default_to_first_host ${ssh_host:-${sshhost:-${host}}})
    ssh -F .vagrant/cops-sshconfig-$host vagrant "${@}"
}


do_ssh() {
    local host=$(default_to_first_host ${ssh_host:-${sshhost:-${host}}})
    do_sshgen $host
    ssh_host=$host do_ssh_ "${@}"
}


get_cops_installer() {
    for i in $COPS_VAGRANT_DIR ./ ../bin ../../bin;do
        installer="$i/cops_pkgmgr_install.sh"
        if [ -e "$installer" ];then
            echo $installer
            break
        fi
    done
}


install_python() {
    cd "$W"
    if python -c "1" 2>/dev/null;then
        [[ -n $DEBUG ]] && echo "Python already installed"
        return 0
    fi
    installer=$(get_cops_installer)
    if [[ -z $installer ]];then
        echo "packages installer not found"
        return 1
    fi
    installpy() { NONINTERACTIVE=y bash "$installer" python;  }
    c="mint|debian|ubuntu|redhat|red-hat"
    if cat /etc/*-release 2>/dev/null | egrep -qi "$c";then
        installpy
    else
        echo "No method to check python install"
    fi
}


set_hosts_args() {
    hosts=""
    cmd_args=""
    for i in ${@};do
        if echo $i |grep -v help| egrep -ivq -- "^-";then
            hosts="$hosts $i"
        else
            cmd_args="$cmd_args $i"
        fi
    done
    if [[ -z $hosts ]];then hosts=$(default_to_first_host);fi
}


select_ciphers() {
    local scipher=
    if [[ -z ${NO_DEFAULT_CIPHER-} ]];then
        for cipher in $ORDERED_SSH_CIPHERS;do
            if echo "$SSH_CIPHERS" | grep -iq $cipher;then
                if [[ -n $scipher ]];then
                    scipher="$cipher $scipher"
                else
                    scipher="$cipher"
                fi
            fi
        done
    fi
    if [[ -n $scipher ]];then
        echo $scipher
    fi
}


select_negociated_cipher() {
    local remote_ciphers=$(do_ssh ssh -Q cipher)
    local selected_cipher=""
    for c in $(select_ciphers);do
        if echo "$remote_ciphers"|grep -iq $c;then
            selected_cipher=$c
            break
        fi
    done
    if [[ -n $selected_cipher ]];then
        echo "$selected_cipher"
    fi
}


do_sshgen() {
    hosts=${@}
    local ciphers=$(echo $SSH_CIPHERS|sed "s/ /,/g")
    if [[ -z $1 ]];then hosts=$(default_to_first_host);fi
    selected_ciphers=$(select_ciphers|sed "s/ /,/g")
    if [[ -n $selected_ciphers ]];then
        selected_ciphers="$selected_ciphers,$ciphers"
    else
        selected_ciphers="$ciphers"
    fi
    for h in $hosts;do
        if [ ! -e .vagrant ];then mkdir .vagrant;fi
        local scfg=.vagrant/cops-sshconfig-$h
        COPS_DEBUG= vagrant ssh-config $h | sed \
            -e "s/User .*/User root/g" \
            -e "s/Host .*/Host vagrant/g" > "$scfg"
        #sed -i -e '/Port.*/ { a Ciphers arcfour;a Compression no; a\ ;}' "$scfg"
        sed -i -e '/Port.*/ a\  Ciphers '"$selected_ciphers" "$scfg"
        if echo "$COPS_SSHFS_OPTS" | grep -qi arcfour;then
            sed -i -e '/Compression/d'  "$scfg"
            sed -i -e '/Port.*/ a\  Compression no' "$scfg"
        fi
        if ! ( grep -q "Host vagrant" .vagrant/cops-sshconfig-$h );then
            echo "pb with vagrant-sshconfig $h" >&2
            exit 1
        fi
    done
}


test_ssh_link() {
    local h="" hosts="${hosts-}" i=""
    set_hosts_args ${@}
    for h in $hosts;do
        for i in $(seq ${ssh_connection_retries:-2});do
            if ssh_host=$h do_ssh_ /bin/true;then
                return 0
            fi
            do_sshgen $h || die "sshgen for $h failed"
        done
    done
    die_in_error "$h ssh connection failed"
}


activate_arcfour() {
    local h=$1
    local scfg=/etc/ssh/sshd_config
    if [ ! -e .vagrant/cops-sshconfig-$h ];then
        do_sshgen $h
    fi
    if ! ( ssh_host=$h do_ssh_ egrep -q "^Ciphers.*arcfour" $scfg; );then
        ciphers=$(ssh_host=$h do_ssh_ "ssh -Q cipher localhost | paste -d , -s")
        if [[ -n $ciphers ]];then
            cmd="sed -i '/^Ciphers /d' $scfg"
            cmd="$cmd && printf \"\n\nCiphers $ciphers\n\n\""
            cmd="$cmd >>$scfg"
            cmd="$cmd && service ssh restart"
            ssh_host=$h do_ssh_ "$cmd" || die "reconfigure sshd ciphers for $h"
        fi
    fi
}


do_mount() {
    local hosts="" cmd_args=""
    set_hosts_args ${@}
    for h in $hosts;do
        local ssh_host=$h
        VM_MOUNTPATH=$(get_vm_mountpath)
        VM_MOUNTPOINT=$VMS_MOUNT_PATH/$h
        if [ ! -e "${VM_MOUNTPOINT}" ];then
            mkdir -p "${VM_MOUNTPOINT}"
        fi
        # activating all ciphers on remote
        if [ ! -e "${VM_MOUNTPOINT}/bin" ];then
            activate_arcfour $h
            die_in_error "Error while activating arcfour on $h"
            do_sshgen $h
            die_in_error "sshgen $h"
            remote_ciphers=$(do_ssh ssh -Q cipher)
            local selected_cipher="$(select_negociated_cipher)"
            vv sshfs $COPS_SSHFS_OPTS \
                $( if [[ -n $selected_ciphers ]];then
                    echo "-o Cipher=$selected_cipher"
                   fi )\
                -F "$(pwd)/.vagrant/cops-sshconfig-$h" \
                "vagrant:$VM_MOUNTPATH" "${VM_MOUNTPOINT}"
            die_in_error "Error while mounting $h"
        else
            log "VM $h is already mounted: ${VM_MOUNTPOINT}"
        fi
    done
}


do_umount() {
    local hosts="" cmd_args=""
    set_hosts_args ${@}
    for h in $hosts;do
        VM_MOUNTPATH=$(get_vm_mountpath)
        VM_MOUNTPOINT=$VMS_MOUNT_PATH/$h
        if [ -e "$VM_MOUNTPOINT/bin" ];then
            vv fusermount -u "${VM_MOUNTPOINT}"
            die_in_error "Error while umounting $h"
        elif [[ -n "$(ls "$VM_MOUNTPOINT")" ]];then
            vv fusermount -u "${VM_MOUNTPOINT}"
            die_in_error "Error while umounting $h"
        else
            log "$PWD not mounted $h"
        fi
    done
}


vagrant_up() {
    local hosts="" cmd_args=""
    set_hosts_args ${@}
    for h in $hosts;do
        vagrant up $h $cmd_args
        die_in_error "Error while starting $h"
    done
}


do_provision() {
    local hosts="" cmd_args=""
    vagrant_up --provision ${@}
    do_mount $hosts
}


do_up() {
    local hosts="" cmd_args=""
    vagrant_up --no-provision ${@}
    do_mount $hosts
}


do_down() {
    local hosts="" cmd_args=""
    set_hosts_args ${@}
    for h in $hosts;do
        do_umount $h
        die_in_error "Error while mounting $h"
    done
    for h in $hosts;do
        vagrant halt -f $h $cmd_args
        die_in_error "Error while stopping $h"
    done
}


do_destroy() {
    local hosts="" cmd_args=""
    set_hosts_args ${@}
    for h in $hosts;do
        do_down $h
        die_in_error "Error while downning $h"
    done
    for h in $hosts;do
        vagrant destroy $h $cmd_args
        die_in_error "Error while destroying $h"
    done
}


do_import() {
    BOX=${BOX:-${1}}
    shift
    if [ -z "${BOX}" ];then
        die "give a box file"
    fi
    if [ ! -e ${BOX} ];then
        die "provide a valid box file"
    fi
    boximportname=cops_$(sanitize $PWD)
    vv vagrant box add --force "${boximportname}" "${BOX}" ${@}
    die_in_error "vagrant box import from $BOX failed"
    if [ ! -e vagrant_config.yml ];then
        echo "---">>vagrant_config.yml
    fi
    dcfg=$(find ~/.vagrant*/"boxes/${boximportname}" \
        -name vagrant_config.yml 2>/dev/null | head -n1)
    if [[ -n "${dcfg}" ]] && [ -f "${dcfg}" ];then
        vv cp -f "${dcfg}" vagrant_config.yml
    else
        echo >> vagrant_config.yml
    fi
    sed -i "/(BOX|BOX_URI)/d" vagrant_config.yml
    cat >> vagrant_config.yml << EOF
BOX: ${boximportname}
BOX_URI: file://$(readlink -f ${BOX})
EOF
    die_in_error "vagrant setup for import is done, you can now run $0 up --help"
}

get_vm_mountpath() {
    CONFMOUNTPATH="$(grep  VM_MOUNTPATH: vagrant_config.yml \
            | awk '{print $2}' | sed -re "s/[\"\']//g")"
    echo ${CONFMOUNTPATH:-/}
}


do_export() {
    BOX=${1:-$(default_to_first_host)}
    shift
    local hosts="" cmd_args=""
    set_hosts_args ${@}
    if [[ -z $hosts ]];then
         hosts=$(default_to_first_host)
    fi
    if [ -z "${BOX}" ];then
        die "give a box name"
    fi
    for h in $hosts;do
        if vagrant status $h | egrep -q running;then
            die "Vagrant $h is running, poweroff VMs first with: vagrant halt -f"
        fi
        f="${BOX}.box"
        if [ "x$h" != "x${BOX}" ];then
            f="${BOX}-$h.box"
        fi
        vv vagrant package --output $f \
            $([[ -f vagrant_config.yml ]] && \
                    echo --include vagrant_config.yml ${cmd_args} $h ; )
        die_in_error "vagrant export to ${h}-$BOX failed"
    done
}


usage() {
    NO_HEADER=y die '
Wrapper to control vm

    '"$0 $actions "'
    - mount: mount the vm inside local/mountpoint
    - umount: umount the vm
    - down: umount & stop the vm
    - destroy: umount, stop & destroy the vm
    - up: start & mount vm
    - export: export vm to a file
    - import: import vm from a file
    - ssh: ssh into the vm
    - sshgen: generate ssh client file .vagrant/cops-sshconfig
    - install_python: install python
    - help [command]: specific command help
    - (any other arguments): proxy the arguments to vagrant
'
}


sshgen_usage() {
    NO_HEADER=y die '
Generate .vagrant/cops-sshconfig: ssh client config file to access the vagrant vm

    '"$0 $action"' [id]
'
}


ssh_usage() {
    NO_HEADER=y die '
SSH client wrapper (go as root inside the VM) (go to first host by default)
[sshhost=]
    '"$0 $action"'
'
}


umount_usage() {
    NO_HEADER=y die '
Umount a vagrant vm

    '"$0 $action"' [id]
'
}


mount_usage() {
    NO_HEADER=y die '
Mount a vagrant vm using sshfs to local/mountpoint

    '"$0 $action"' [id]
'
}


status_usage() {
    NO_HEADER=y die '
Status of vms

    '"$0 $action"' [id]
'"$(vagrant status --help)"
}


down_usage() {
    NO_HEADER=y die '
Umount and stop the vm

    '"$0 $action"' [id]
'"$(vagrant halt --help)"
}


destroy_usage() {
    NO_HEADER=y die '
Umount, stop, destroy the vm

    '"$0 $action"' [id]
'"$(vagrant destroy --help)"
}

provision_usage() {
    NO_HEADER=y die '
Start, provision and mount the vm

    '"$0 $action"' [id]
'"$(vagrant up --help)"

}

up_usage() {
    NO_HEADER=y die '
Start and mount the vm

    '"$0 $action"' [id] [--no-provision]
'"$(vagrant up --help)"

}

install_python_usage() {
    NO_HEADER=y die '
Install python

    '"$0"''
}

export_usage() {
    NO_HEADER=y die '
Export a vagrant vm

    '"$0"' toto [id]
'"$(vagrant package --help|egrep -v -- '--(base|help|output)')"
}


import_usage() {
    NO_HEADER=y die '
    [BOX=] \
[NO_BOX_CLEANUP=] \
Import a vagrant vm inside vagrant catalog and
setup vagrant_config.yml to point to it

    '"$0 $action"' toto.box
'"$(vagrant box add --help|egrep -v -- '--(name|help)')"
}


help_usage() {
    NO_HEADER=y die '
Specific help

    '"$0 $action"'
'
}


parse_usage() {
    for a in ${@};do
        case $a in
            -h|-l|--help)
                case $action in
                    halt|stop|down) down_usage ${@};;
                    start|up|fire) up_usage ${@};;
                    $actions) ${action}_usage;;
                    *) usage;;
                esac
        esac
    done
}

set_ssh_vars() {
    ORDERED_SSH_CIPHERS=${ORDERED_SSH_CIPHERS-}
    if [[ -z $ORDERED_SSH_CIPHERS ]];then
        ORDERED_SSH_CIPHERS="$ORDERED_SSH_CIPHERS aes256-gcm@openssh.com"
        ORDERED_SSH_CIPHERS="$ORDERED_SSH_CIPHERS aes128-gcm@openssh.com"
        ORDERED_SSH_CIPHERS="$ORDERED_SSH_CIPHERS aes256-cbc"
        ORDERED_SSH_CIPHERS="$ORDERED_SSH_CIPHERS aes256-ctr"
        ORDERED_SSH_CIPHERS="$ORDERED_SSH_CIPHERS aes192-cbc"
        ORDERED_SSH_CIPHERS="$ORDERED_SSH_CIPHERS aes192-ctr"
        ORDERED_SSH_CIPHERS="$ORDERED_SSH_CIPHERS aes128-cbc"
        ORDERED_SSH_CIPHERS="$ORDERED_SSH_CIPHERS aes128-ctr"
        ORDERED_SSH_CIPHERS="$ORDERED_SSH_CIPHERS arcfour"
    fi
    SSH_CIPHERS=$(ssh -Q cipher 2>/dev/null)
    SSHFS_HELP="$(sshfs --help 2>&1)"
    DEFAULT_COPS_SSHFS_OPTS=""
    DEFAULT_COPS_SSHFS_OPTS="$DEFAULT_COPS_SSHFS_OPTS -o Compression=no"
    DEFAULT_COPS_SSHFS_OPTS="$DEFAULT_COPS_SSHFS_OPTS -o ServerAliveCountMax=3 -o ServerAliveInterval=15"
    if echo "$SSHFS_HELP" | grep -iq "cache=";then
        DEFAULT_COPS_SSHFS_OPTS="$DEFAULT_COPS_SSHFS_OPTS -o cache=yes"
    fi
    for i in large_read kernel_cache reconnect;do
        if echo "$SSHFS_HELP" | grep -iq $i;then
            DEFAULT_COPS_SSHFS_OPTS="$DEFAULT_COPS_SSHFS_OPTS -o $i"
        fi
    done
    if echo "$SSHFS_HELP" | grep -iq "all workarounds";then
        DEFAULT_COPS_SSHFS_OPTS="$DEFAULT_COPS_SSHFS_OPTS -C -o workaround=all"
    fi
    COPS_SSHFS_OPTS="${COPS_SSHFS_OPTS:-"$DEFAULT_COPS_SSHFS_OPTS"}"
}

ensure_host_utils() {
    local nocheck=${NO_HOST_CHECK_UTILS-}
    case $action in
        install_python) nocheck=1;;
    esac
    if [[ -z $nocheck ]];then
        for i in sshfs ssh vagrant;do
            if ! has_command $i;then
                die "install $i"
            fi
        done
    fi
}


main() {
    action=$1
    shift
    parse_usage $action $1
    ensure_host_utils
    set_ssh_vars
    case $action in
        halt|stop|down) do_down ${@};;
        start|up|fire) do_up ${@};;
        install_python) install_python ${@};;
        $actions) do_$action ${@};;
        *) vagrant "$action" "${@}";;
    esac
}
main ${@}
# vim:set et sts=4 ts=4 tw=80:

#!/usr/bin/env bash
cd "$(dirname ${0})/.."
BASE_ROLES=""
CONFIG_ROLES="\
corpusops.roles/localsettings_basepkgs
corpusops.roles/localsettings_locales
corpusops.roles/localsettings_profile
corpusops.roles/localsettings_ssh
corpusops.roles/localsettings_sudo"
NOT_IN_DOCKER_ROLES=""
SERVICES_ROLES="\
corpusops.roles/services_base_sshd"
DEBIAN_ROLES="\
corpusops.roles/localsettings_autoupgrades_vars
corpusops.roles/localsettings_autoupgrades"
UBUNTU_ROLES="\
corpusops.roles/localsettings_apparmor_vars
corpusops.roles/localsettings_apparmor"
NO_BUILD=${NO_BUILD-}
NO_SYNC=${NO_SYNC-}
NO_SQUASH=${NO_SQUASH-}
# scripts vars
SCRIPT=$0
LOGGER_NAME=${LOGGER_NAME-$(basename $0)}
SCRIPT_NAME=$(basename "${SCRIPT}")
SCRIPT_DIR=$(cd "$(dirname $0)" && pwd)
# OW: from where script was called (must be defined from callee)
OW="${OW:-$(pwd)}"
# W is script_dir/..
W=${W:-$(cd "$SCRIPT_DIR/.." && pwd)}
# colors
RED="\\e[0;31m"
CYAN="\\e[0;36m"
YELLOW="\\e[0;33m"
NORMAL="\\e[0;0m"
NO_COLOR=${NO_COLORS-${NO_COLORS-${NOCOLOR-${NOCOLORS-}}}}
LOGGER_NAME=${LOGGER_NAME:-corpusops_build}
ERROR_MSG="There were errors"
do_trap_() { rc=$?;func=$1;sig=$2;${func};if [ "x${sig}" != "xEXIT" ];then kill -${sig} $$;fi;exit $rc; }
do_trap() { rc=${?};func=${1};shift;sigs=${@};for sig in ${sigs};do trap "do_trap_ ${func} ${sig}" "${sig}";done; }
parse_cli() { parse_cli_common "${@}"; }
parse_cli_common() {
    USAGE=
    for i in ${@-};do
        case ${i} in
            --no-color|--no-colors|--nocolor|--no-colors)
                NO_COLOR=1;;
            -h|--help)
                USAGE=1;;
            *) :;;
        esac
    done
    reset_colors
    if [[ -n ${USAGE} ]]; then
        usage
    fi
}
log_() {
    reset_colors;msg_color=${2:-${YELLOW}};
    logger_color=${1:-${RED}};
    logger_slug="${logger_color}[${LOGGER_NAME}]${NORMAL} ";
    shift;shift;
    if [[ -n ${NO_LOGGER_SLUG} ]];then logger_slug="";fi
    printf "${logger_slug}${msg_color}$(echo "${@}")${NORMAL}\n" >&2;
    printf "" >&2;  # flush
}
reset_colors() { if [[ -n ${NO_COLOR} ]];then BLUE="";YELLOW="";RED="";CYAN="";fi; }
log() { log_ "${RED}" "${CYAN}" "${@}"; }
get_chrono() { date "+%F_%H-%M-%S"; }
cronolog() { log_ "${RED}" "${CYAN}" "($(get_chrono)) ${@}"; }
debug() { if [[ -n "${DEBUG// }" ]];then log_ "${YELLOW}" "${YELLOW}" "${@}"; fi; }
warn() { log_ "${RED}" "${CYAN}" "${YELLOW}[WARN] ${@}${NORMAL}"; }
bs_log(){ log_ "${RED}" "${YELLOW}" "${@}"; }
bs_yellow_log(){ log_ "${YELLOW}" "${YELLOW}" "${@}"; }
may_die() {
    reset_colors
    thetest=${1:-1}
    rc=${2:-1}
    shift
    shift
    if [ "x${thetest}" != "x0" ]; then
        if [[ -z "${NO_HEADER-}" ]]; then
            NO_LOGGER_SLUG=y log_ "" "${CYAN}" "Problem detected:"
        fi
        NO_LOGGER_SLUG=y log_ "${RED}" "${RED}" "$@"
        exit $rc
    fi
}
die() { may_die 1 1 "${@}"; }
die_in_error_() {
    ret=${1}; shift; msg="${@:-"$ERROR_MSG"}";may_die "${ret}" "${ret}" "${msg}";
}
die_in_error() { die_in_error_ "${?}" "${@}"; }
has_command() {
    ret=1
    if which which >/dev/null 2>/dev/null;then
      if which "${@}" >/dev/null 2>/dev/null;then
        ret=0
      fi
    else
      if command -v "${@}" >/dev/null 2>/dev/null;then
        ret=0
      else
        if hash -r "${@}" >/dev/null 2>/dev/null;then
            ret=0
        fi
      fi
    fi
    return ${ret}
}
pipe_return() {
    local filter=$1;shift;local command=$@;
    (((($command; echo $? >&3) | $filter >&4) 3>&1) | (read xs; exit $xs)) 4>&1;
}
output_in_error() { ( do_trap output_in_error_post EXIT TERM QUIT INT;\
                      output_in_error_ "${@}" ; ); }
output_in_error_(){
    if [[ -n ${OUTPUT_IN_ERROR_DEBUG-} ]];then set -x;fi
    if [[ -n $TRAVIS ]] || [[ -n $GITLAB_CI ]];then
        DEFAULT_CI_BUILD=y
    fi
    CI_BUILD="${CI_BUILD-${DEFAULT_CI_BUILD-}}"
    if [[ -n $CI_BUILD ]];then
        DEFAULT_NO_OUTPUT=y
        DEFAULT_DO_OUTPUT_TIMER=y
    fi
    VERBOSE="${VERBOSE-}"
    TIMER_FREQUENCE="${TIMER_FREQUENCE:-120}"
    NO_OUTPUT="${NO_OUTPUT-${DEFAULT_NO_OUTPUT-1}}"
    DO_OUTPUT_TIMER="${DO_OUTPUT_TIMER-$DEFAULT_DO_OUTPUT_TIMER}"
    LOG=${LOG-}
    if [[ -n $NO_OUTPUT ]];then
        if [[ -z "${LOG}" ]];then
            LOG=$(mktemp)
            DEFAULT_CLEANUP_LOG=y
        else
            DEFAULT_CLEANUP_LOG=
        fi
    else
        DEFAULT_CLEANUP_LOG=
    fi
    CLEANUP_LOG=${CLEANUP_LOG:-${DEFAULT_CLEANUP_LOG}}
    if [[ -n $VERBOSE ]];then
        log "Running$([[ -n $LOG ]] && echo "($LOG)"; ): $@";
    fi
    TMPTIMER=
    if [[ -n ${DO_OUTPUT_TIMER} ]]; then
        TMPTIMER=$(mktemp)
        ( i=0;\
          while test -f $TMPTIMER;do\
           i=$((++i));\
           if [ `expr $i % $TIMER_FREQUENCE` -eq 0 ];then \
               log "BuildInProgress$([[ -n $LOG ]] && echo "($LOG)"; ): ${@}";\
             i=0;\
           fi;\
           sleep 1;\
          done;\
          if [[ -n $VERBOSE ]];then log "done: ${@}";fi; ) &
    fi
    if [[ -n $NO_OUTPUT ]];then
        "${@}" >>"$LOG" 2>&1;ret=$?
    else
        if [[ -n $LOG ]] && has_command tee;then
            pipe_return "tee -a $LOG" "${@}";ret=$?
        else
            "${@}";ret=$?
        fi
    fi
    if [[ -e "$TMPTIMER" ]]; then rm -f "${TMPTIMER}";fi
    if [[ -z ${OUTPUT_IN_ERROR_NO_WAIT-} ]];then wait;fi
    if [ -e "$LOG" ] &&  [[ "${ret}" != "0" ]] && [[ -n $NO_OUTPUT ]];then
        cat "$LOG" >&2
    fi
    if [[ -n ${OUTPUT_IN_ERROR_DEBUG-} ]];then set +x;fi
    return ${ret}
}
output_in_error_post() {
    if [[ -e "$TMPTIMER" ]]; then rm -f "${TMPTIMER}";fi
    if [[ -e "$LOG" ]] && [[ -n $CLEANUP_LOG ]];then rm -f "$LOG";fi
}
test_silent_log() { ( [[ -z ${NO_SILENT-} ]] && ( [[ -n ${SILENT_LOG-} ]] || [[ -n "${SILENT_DEBUG}" ]] ) ); }
test_silent() { ( [[ -z ${NO_SILENT-} ]] && ( [[ -n ${SILENT-} ]] || test_silent_log ) ); }
silent_run_() { (LOG=${SILENT_LOG:-${LOG}};NO_OUTPUT=;\
                 if test_silent;then NO_OUTPUT=y;fi;output_in_error "$@";) }
silent_run() { ( silent_run_ "${@}" ; ); }
run_silent() { SILENT=${SILENT-1} silent_run "${@}"; }
vvv() { debug "${@}";silent_run "${@}"; }
vv() { log "${@}";silent_run "${@}";}
silent_vv() { SILENT_LOG=${SILENT_LOG-} SILENT=${SILENT-1} vv "${@}"; }

usage () {
    NO_HEADER=y die '
Base test script for corpusops

 [NO_SYNC=] \
 [NO_BUILD=y] \
 [NO_ROLES_TEST=y]\
 [NO_NOT_IN_DOCKER_ROLES_TEST=y]\
 [ROLES_TO_TEST=]\
 [NOCOLOR=y] \
 [DEBUG=y] \
 [IMAGES=xxx] \
    '"$0"'
'
}
get_short_roles_to_test() {
    local roles_to_test=""
    if [[ -n "$2" ]];then
        roles_to_test="${1:-}"
        shift
    fi
    for i in $@;do
        roles_to_test="$roles_to_test $W/roles/$i"
    done
    echo "$(get_roles_to_test "$roles_to_test")"
}
get_roles_to_test() {
    local roles_to_test="${@}"
    echo "${roles_to_test}"|xargs -n1|awk '!seen[$0]++'
}
get_roles_to_test_for_image() {
    local image="${1:-"corpusops/ubuntu"}"
    shift
    echo "$(get_roles_to_test "$@")"
}
parse_cli() {
    parse_cli_common "${@}"
}


parse_cli "$@"
if [[ -n "${NO_SYNC}" ]];then
    log "Skipping code sync"
else
    vv bin/install.sh -C --synchronize-code
    die_in_error "SYNC failed"
fi
if [[ -n "${NO_BUILD}" ]];then
    log "Skipping build step"
else
    vv hacking/build_images
    die_in_error "BUILD failed"
fi
if [[ -n "${NO_ROLES_TEST}" ]];then
    log "Skipping roles test step"
else
    roles_to_test="${ROLES_TO_TEST-}"
    if [[ -z ${roles_to_test} ]];then
        roles_to_test="$(get_short_roles_to_test \
            "$roles_to_test" "${BASE_ROLES}")"
        roles_to_test="$(get_short_roles_to_test \
            "$roles_to_test" "${CONFIG_ROLES}")"
        roles_to_test="$(get_short_roles_to_test \
            "$roles_to_test" "${SERVICES_ROLES}")"
        if echo $image | egrep -iq "debian|ubuntu"; then
            roles_to_test="$(get_short_roles_to_test \
                "$roles_to_test" ${DEBIAN_ROLES})"
        fi
        if echo $image | egrep -iq "ubuntu"; then
            roles_to_test="$(get_short_roles_to_test \
                "$roles_to_test" ${UBUNTU_ROLES})"
        fi
    fi
    roles_to_test="$(get_roles_to_test $roles_to_test)"
    vv hacking/test_roles "${roles_to_test}"
    die_in_error "roles tests failed"
fi
if [[ -n "${NO_NOT_IN_DOCKER_ROLES_TEST}" ]];then
    log "Skipping not in docker roles test step"
else
    ret=0
    if [[ -n $TRAVIS ]];then NOT_IN_DOCKER_ROLES=;fi
    nid_roles_to_test="${NID_ROLES_TO_TEST-}"
    nid_roles_to_test="$(get_short_roles_to_test \
        "$nid_roles_to_test" ${NOT_IN_DOCKER_ROLES})"
    if [[ -n "e$NOT_IN_DOCKER_ROLES" ]] && ! NOT_IN_DOCKER=1 vv \
        hacking/test_roles "$nid_roles_to_test"; then
        ret=1
    fi
    die_in_error_ "${ret}" "roles tests failed"
fi
# vim:set et sts=4 ts=4 tw=80:

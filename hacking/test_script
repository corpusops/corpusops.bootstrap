#!/usr/bin/env bash
cd "$(dirname ${0})/.."
export LOGGER_NAME=$(basename $0)

sc=hacking/build_env
[[ ! -e $sc ]] && echo "missing $sc" >&2
. "$sc" || exit 1

usage () {
    NO_HEADER=y die '
Regenerate found distributions dockerfiles from template

 [NO_SYNC=] \
 [NO_BUILD=y] \
 [NO_ROLES_TEST=y]\
 [NO_NOT_IN_DOCKER_ROLES_TEST=y]\
 [ROLES_TO_TEST=]\
 [NOCOLOR=y] \
 [NO_GEN=y] \
 [DEBUG=y] \
 [IMAGES=xxx] \
    '"$0"'
'
}

parse_cli() {
    parse_cli_common "${@}"
}

parse_cli "$@"

if [[ -n "${NO_SYNC}" ]];then
    log "Skipping code sync"
else
    vv bin/install.sh -C --synchronize-code
    die_in_error "SYNC failed"
fi

if [[ -n "${NO_BUILD}" ]];then
    log "Skipping build step"
else
    vv hacking/build_images
    die_in_error "BUILD failed"
fi

if [[ -n "${NO_ROLES_TEST}" ]];then
    log "Skipping roles test step"
else
    vv hacking/test_roles
    die_in_error "roles tests failed"
fi
if [[ -n "${NO_NOT_IN_DOCKER_ROLES_TEST}" ]];then
    log "Skipping not in docker roles test step"
else
    ret=0
    for i in ${NOT_IN_DOCKER_ROLES}; do
        if ! NOT_IN_DOCKER=1 vv \
                hacking/test_roles "${W}/roles/${i}"; then
            ret=1
        fi
    done
    die_in_error_ "${ret}" "roles tests failed"
fi
# vim:set et sts=4 ts=4 tw=80:

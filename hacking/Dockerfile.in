# For quickier rebuilds, we isolate each step of the installation
# and their requisites; together with docker cache

# __STRIPME__: __IMAGE__ will be replaced, see docker/docker_gen_dockerfiles.sh
FROM __IMAGE_PREPROVISION__

# Rewarm apt cache
RUN bash -c '\
  if egrep -qi "ubuntu|mint|debian" /etc/*-release 2>/dev/null;then\
      apt-get update -y -qq;\
      if [ "x${PKGS_REMOVES-}" != "x" ];then\
        apt-get install -y $PKGS_REMOVES;\
      fi;\
  fi'

ARG NO_OUTPUT=y
ARG KEEP_DOCKERD=no
## Refresh files
ADD hacking/   $COPS_ROOT/hacking/
ADD bin/       $COPS_ROOT/bin/
ADD src/       $COPS_ROOT/src/
ADD playbooks/ $COPS_ROOT/playbooks/
ADD docs/      $COPS_ROOT/docs/
ADD docker/    $COPS_ROOT/docker/
ADD roles/     $COPS_ROOT/roles/

# Be sure that system python is capable of SSL SNI connections
RUN bash -c 'step_rev=6;set -e;\
    $_sar ${COPS_ROOT}/roles/corpusops.roles/localsettings_python_sni/role.yml'

# Install docker client for dind(sibling via docker socket) workflows
RUN bash -c 'step_rev=2;set -e;\
    $_sar ${COPS_ROOT}/roles/corpusops.roles/localsettings_docker/role.yml'

# Make the docker image a preconfigured-for-production image
RUN bash -c 'step_rev=2;set -e;\
    $_sar ${COPS_ROOT}/roles/corpusops.roles/playbooks/provision/server.yml'

# pack, cleanup, snapshot any found git repo
RUN bash -c 'step_rev=3;set -e;cd $COPS_ROOT;\
    if [ "x$KEEP_DOCKERD" = "xno" ];then \
      rm -f /usr/bin/docker-containerd; \
      rm -f /usr/bin/docker-containerd-ctr; \
      rm -f /usr/bin/docker-containerd-shim; \
      rm -f /usr/bin/docker-init; \
      rm -f /usr/bin/docker-proxy; \
      rm -f /usr/bin/docker-runc; \
      rm -f /usr/bin/dockerd; \
    fi; \
    PKGS_REMOVES="gcc" \
    DEV_AUTOREMOVE=y \
    GIT_SHALLOW_DEPTH=1 \
    GIT_SHALLOW=y \
    NO_IMAGE_STRIP= \
        /sbin/cops_container_strip.sh'

# Default to launch systemd, and you ll have have to mount:
#  -v /sys/fs/cgroup:/sys/fs/cgroup:ro
STOPSIGNAL SIGRTMIN+3
CMD ["/entry_point"]
# vim:set et ft=Dockerfile:

#!/usr/bin/env bash
COPS_SCRIPTS_DIR="$(cd "$(dirname "$0")" && pwd)"
if [ -e "$COPS_SCRIPTS_DIR/ansible_deploy_env" ];then
    . "$COPS_SCRIPTS_DIR/ansible_deploy_env"
fi
usage() {
    NO_HEADER=y die '
[STAGES_DIR= ]\\
[NO_GEN= ]\\
[NO_STAGES_BUILD= ]\\
[NO_FULL_BUILD= ]\\
[DOCKER_IMAGE= ]\\
    '$0' [stage] ... [stage]

Cook Dockerfiles and run docker, potentially incrementally thorough stages
Stages are simple dockerfile snippets that will be concatenated to produce
the final docker file
'
}
STAGES_TO_BUILD=${STAGES_TO_BUILD:-$@}
parse_cli $@
cd "$OW"
STAGES_DIR="${STAGES_DIR:-"$OW/.docker"}"
STAGES="$(find "$STAGES_DIR/" -type f -name "Dockerfile*" |sort -h)"
DEFAULT_DOCKER_IMAGE="$A_GIT_NAMESPACE/$A_GIT_PROJECT"
DOCKER_IMAGE="${DOCKER_IMAGE:-$DEFAULT_DOCKER_IMAGE}"
if ( echo $DOCKER_IMAGE | grep -q : );then
    DOCKER_IMAGE_TAG="$(echo $DOCKER_IMAGE|awk -F: '{print $2}')"
    DOCKER_IMAGE="$(echo $DOCKER_IMAGE|awk -F: '{print $1}')"
else
    DOCKER_IMAGE_TAG="${DOCKER_IMAGE_TAG:-latest}"
fi
DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS:-"--squash"}"
echo "# Generated by $(basename $0)" > Dockerfile
j=0
jprev=0
while read f;do
    if [[ -z "${NO_GEN-}" ]];then
        cat "$f" >> Dockerfile
        # For upper stages, generate also a partial docker file
        echo "# Generated by $(basename $0)" > "Dockerfile.stage$j"
        if [ $j -gt 0 ];then
            echo "FROM ${DOCKER_IMAGE}:${DOCKER_IMAGE_TAG}_stage${jprev}" \
                >> "Dockerfile.stage$j"
        fi
        cat "$f" >> "Dockerfile.stage$j"
    fi
    jprev=$j
    ((++j))
done <<< "$STAGES"
if [[ -z $STAGES_TO_BUILD ]];then
    STAGES_TO_BUILD=$(seq 0 $j)
fi
if [[ -z "${NO_STAGES_BUILD-}" ]];then
    for i in $STAGES_TO_BUILD;do
        vv docker build \
         -t "${DOCKER_IMAGE}:${DOCKER_IMAGE_TAG}_stage${i}" \
         $( [[ -n ${A_ENV_NAME-} ]] && echo "--build-arg=APP_ENV_NAME=$A_ENV_NAME" ) \
         -f "Dockerfile.stage$i" .
        ret=$?
        if [ "x$ret" != "x0" ];then
            log "$OW: Failed building stage: $i"
            break
        fi
    done
fi
if [[ -z "${NO_FULL_BUILD-}" ]] && [[ -z $STAGES_TO_BUILD ]];then
    vv docker build \
        -t "${DOCKER_IMAGE}:${DOCKER_IMAGE_TAG}" \
        $( [[ -n ${A_ENV_NAME-} ]] && echo "--build-arg=APP_ENV_NAME=$A_ENV_NAME" ) \
        -f "Dockerfile" .
    ret=$?
    if [ "x$ret" != "x0" ];then
        log "$OW: Failed building full image: $i"
    fi
fi
exit $ret

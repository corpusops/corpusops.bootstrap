#!/usr/bin/env bash
OW=$(pwd)
cd "$(dirname ${0})/.."
export COPS_ROOT=${LOCAL_COPS_ROOT:-${COPS_ROOT:-$(pwd)}}
export LOGGER_NAME=$(basename $0)

RED="\\e[0;31m"
CYAN="\\e[0;36m"
YELLOW="\\e[0;33m"
NORMAL="\\e[0;0m"
NO_COLOR=${NO_COLORS-${NO_COLORS-${NOCOLOR-${NOCOLORS-}}}}
LOGGER_NAME=${LOGGER_NAME:-corpusops_build}
ERROR_MSG="There were errors"
log_() {
    reset_colors;msg_color=${2:-${YELLOW}};
    logger_color=${1:-${RED}};
    logger_slug="${logger_color}[${LOGGER_NAME}]${NORMAL} ";
    shift;shift;
    if [[ -n ${NO_LOGGER_SLUG} ]];then logger_slug="";fi
    printf "${logger_slug}${msg_color}$(echo "${@}")${NORMAL}\n" >&2;
    printf "" >&2;  # flush
}
reset_colors() { if [[ -n ${NO_COLOR} ]];then BLUE="";YELLOW="";RED="";CYAN="";fi; }
log() { log_ "${RED}" "${CYAN}" "${@}"; }
cronolog() { log_ "${RED}" "${CYAN}" "($(get_chrono)) ${@}"; }
debug() { if [[ -n "${DEBUG// }" ]];then log_ "${YELLOW}" "${YELLOW}" "${@}"; fi; }
warn() { log_ "${RED}" "${CYAN}" "${YELLOW}[WARN] ${@}${NORMAL}"; }
bs_log(){ log_ "${RED}" "${YELLOW}" "${@}"; }
bs_yellow_log(){ log_ "${YELLOW}" "${YELLOW}" "${@}"; }
may_die() {
    reset_colors
    thetest=${1:-1}
    rc=${2:-1}
    shift
    shift
    if [ "x${thetest}" != "x0" ]; then
        if [[ -z "${NO_HEADER-}" ]]; then
            NO_LOGGER_SLUG=y log_ "" "${CYAN}" "Problem detected:"
        fi
        NO_LOGGER_SLUG=y log_ "${RED}" "${RED}" "$@"
        exit $rc
    fi
}
die() { may_die 1 1 "${@}"; }
die_in_error_() {
    ret=${1}; shift; msg="${@:-"$ERROR_MSG"}";may_die "${ret}" "${ret}" "${msg}";
}
die_in_error() { die_in_error_ "${?}" "${@}"; }
test_silent_log() { ( [[ -z ${NO_SILENT-} ]] && ( [[ -n ${SILENT_LOG-} ]] || [[ -n "${SILENT_DEBUG}" ]] ) ); }
test_silent() { ( [[ -z ${NO_SILENT-} ]] && ( [[ -n ${SILENT-} ]] || test_silent_log ) ); }
silent_run_post() { if [ -e "${tmpf}" ];then rm -f "${tmpf}";fi; }
silent_run_() {
    tmpf=$(mktemp)
    local ret=
    if ! test_silent;then
        "${@}"
        ret=${?}
    else
        do_trap silent_run_post EXIT TERM QUIT INT
        if test_silent_log;then
            log "Logging command output to ${tmpf}"
        fi
        "${@}" >"${tmpf}" 2>&1
        ret=${?}
        if [ "x${ret}" != "x0" ] && [ -e "${tmpf}" ]; then
            cat "${tmpf}"
        fi
    fi
    return ${ret}
}
silent_run() { ( silent_run_ "${@}" ; ); }
run_silent() { SILENT=${SILENT-1} silent_run "${@}"; }
vvv() { debug "${@}";silent_run "${@}"; }
vv() { log "${@}";silent_run "${@}";}
parse_cli_common() {
    USAGE=
    for i in ${@-};do
        case ${i} in
            --no-color|--no-colors|--nocolor|--no-colors)
                NO_COLOR=1;;
            -h|--help)
                USAGE=1;;
            *) :;;
        esac
    done
    reset_colors
    if [[ -n ${USAGE} ]]; then
        usage
    fi
}
do_trap_() { rc=$?;func=$1;sig=$2;${func};if [ "x${sig}" != "xEXIT" ];then kill -${sig} $$;fi;exit $rc; }
do_trap() { rc=${?};func=${1};shift;sigs=${@};for sig in ${sigs};do trap "do_trap_ ${func} ${sig}" "${sig}";done; }

usage() {
    NO_HEADER=y die '
Wrapper to docker build

    '"$0"' <tag> [<dockerfile>] [<path_to_working_dir>]
 '
}

DOCKER_BUILD_CHAIN=${DOCKER_BUILD_CHAIN:-"$COPS_ROOT/hacking/docker_build_chain.py"}
COPS_SC=${COPS_SC:-"$COPS_ROOT/bin/cops_shell_common"}
LOGGER_FUNC=${LOGGER_FUNC:-log}

usage () {
    NO_HEADER=y die '
Wrapper to '"$DOCKER_BUILD_CHAIN"' for building any image from:
    - via the IMAGES env
    - via BASEIMAGES when called without any argument nor IMAGES env variables

This relies on the presence of a docker folder filled with a docker_build_chain
IMAGES.json descriptor

If the name is missing, the tag will take the name of the "top folder".

 [NO_BUILD_OUTPUT=] \
 [NOCOLOR=y] \
 [NO_BUILD=y] \
 [NO_SQUASH=y] \
 [IMAGES="corpusops/ubuntu:16.04"] \
    '"$0"'

'"$($DOCKER_BUILD_CHAIN --help)"'

'
}
parse_cli() {
    parse_cli_common "${@}"
}
parse_cli "$@"
if [[ -n "${NO_BUILD}" ]];then
    die 0 "Skip building: ${IMAGES}"
fi
if [[ -n "$IMAGES" ]];then
    log "Building images: $IMAGES"
else
    log "Building images: $( echo $( \
        $DOCKER_BUILD_CHAIN --list ${@} \
        |egrep -iv -- "--images=|^messages"))"
fi
NO_OUTPUT=${NO_BUILD_OUTPUT-${TRAVIS-}}
DOCKER_BUILD_CHAIN_DEFAULT_EXTRA_ARGS=""
if [[ -n $NO_OUTPUT ]];then
    DOCKER_BUILD_CHAIN_DEFAULT_EXTRA_ARGS="--quiet ${DOCKER_BUILD_CHAIN_DEFAULT_EXTRA_ARGS}"
fi
DOCKER_BUILD_CHAIN_EXTRA_ARGS="${DOCKER_BUILD_CHAIN_EXTRA_ARGS:-"$DOCKER_BUILD_CHAIN_DEFAULT_EXTRA_ARGS"}"
NO_OUTPUT=$NO_OUTPUT $COPS_SC vv \
    output_in_error $DOCKER_BUILD_CHAIN $DOCKER_BUILD_CHAIN_EXTRA_ARGS ${@}
ret=$?
exit ${ret}
# vim:set et sts=4 ts=4 tw=0:

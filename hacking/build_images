#!/usr/bin/env bash
cd "$(dirname ${0})/.."
export LOGGER_NAME=$(basename $0)

sc=hacking/build_env
[[ ! -e $sc ]] && echo "missing $sc" >&2
. "$sc" || exit 1

usage () {
    NO_HEADER=y die '
Build any image found either in docker/ or via the IMAGES env var.

 [NOCOLOR=y] \
 [NO_GEN=y] \
 [SKIP_FOUND_CANDIDATE_EXIT=y] \
 [NO_BUILD=y] \
 [FORCE_REBUILD=y] \
 [NO_SQUASH=y] \
 [NO_SQUASH_CLEANUP=y] \
 [NO_CANDIDATE_CLEANUP=y] \
 [NO_OLD_IMAGE_CLEANUP=y] \
 [DEBUG=y] \
 [IMAGES="ubuntu:16.04"] \
    '"$0"'
'
}
parse_cli "$@"

failed=""
success=""

build() {
    NOCOLOR=${NOCOLOR-} hacking/docker_build "${1}" "${2}" "${3}"
}

build_image() {
    image_full="${1}"
    tag="${DOCKER_USER}/${image_full}"
    dockerfile="${W}/docker/Dockerfile.${image_full}"
    build "${tag}" "${dockerfile}" "${W}"
    ret=${?}
    if [[ ${ret} != 0 ]];then
        failed="$(echo "${failed} ${image_full}" | xargs)"
    else
        success="$(echo "${success} ${image_full}" | xargs)"
    fi
    return ${ret}
}

if [[ -z "${IMAGES-}" ]];then
    die 3 "No IMAGES en var found nor any valid Dockerfile" \
        ", error, bailing out"
else
    if [[ -n "${NO_BUILD}" ]];then
        die 0 "Skip building: ${IMAGES}"
    else
        log "Building: ${IMAGES}"
    fi
fi

hacking/docker_gen_dockerfiles

while read image_line;do
    for image_full in ${image_line};do
        # XXX We can make this parralel to speed up builds
        NO_OUTPUT=${TRAVIS-} output_in_error \
            build_image "${image_full}"
    done
done <<< ${IMAGES}

log "${YELLOW}images built:${NORMAL}  ${CYAN}${success}"
log "${YELLOW}images errors:${NORMAL} ${CYAN}${failed}"

if [[ -n ${failed// } ]];then
    die 4 "At least one image failed to build: ${failed}"
fi

# vim:set et sts=4 ts=4 tw=80:

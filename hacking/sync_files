#!/usr/bin/env bash
export LOGGER_NAME=$(basename $0)

cd "$(dirname "${0}")/.."

# W is script_dir/..
W=${W:-$(pwd)}
# OW: from where script was called (must be defined from callee)
OW="${OW:-${W}}"
RED="\\e[0;31m"
CYAN="\\e[0;36m"
YELLOW="\\e[0;33m"
NORMAL="\\e[0;0m"
NO_COLOR=${NO_COLORS-${NO_COLORS-${NOCOLOR-${NOCOLORS-}}}}
LOGGER_NAME=${LOGGER_NAME:-corpusops_build}
ERROR_MSG="There were errors"
do_trap_() { rc=$?;func=$1;sig=$2;${func};if [ "x${sig}" != "xEXIT" ];then kill -${sig} $$;fi;exit $rc; }
do_trap() { rc=${?};func=${1};shift;sigs=${@};for sig in ${sigs};do trap "do_trap_ ${func} ${sig}" "${sig}";done; }
log_() {
    reset_colors;msg_color=${2:-${YELLOW}};
    logger_color=${1:-${RED}};
    logger_slug="${logger_color}[${LOGGER_NAME}]${NORMAL} ";
    shift;shift;
    if [[ -n ${NO_LOGGER_SLUG} ]];then logger_slug="";fi
    printf "${logger_slug}${msg_color}$(echo "${@}")${NORMAL}\n" >&2;
    printf "" >&2;  # flush
}
reset_colors() { if [[ -n ${NO_COLOR} ]];then BLUE="";YELLOW="";RED="";CYAN="";fi; }
log() { log_ "${RED}" "${CYAN}" "${@}"; }
get_chrono() { date "+%F_%H-%M-%S"; }
cronolog() { log_ "${RED}" "${CYAN}" "($(get_chrono)) ${@}"; }
debug() { if [[ -n "${DEBUG// }" ]];then log_ "${YELLOW}" "${YELLOW}" "${@}"; fi; }
warn() { log_ "${RED}" "${CYAN}" "${YELLOW}[WARN] ${@}${NORMAL}"; }
bs_log(){ log_ "${RED}" "${YELLOW}" "${@}"; }
bs_yellow_log(){ log_ "${YELLOW}" "${YELLOW}" "${@}"; }
may_die() {
    reset_colors
    thetest=${1:-1}
    rc=${2:-1}
    shift
    shift
    if [ "x${thetest}" != "x0" ]; then
        if [[ -z "${NO_HEADER-}" ]]; then
            NO_LOGGER_SLUG=y log_ "" "${CYAN}" "Problem detected:"
        fi
        NO_LOGGER_SLUG=y log_ "${RED}" "${RED}" "$@"
        exit $rc
    fi
}
die() { may_die 1 1 "${@}"; }
die_in_error_() {
    ret=${1}; shift; msg="${@:-"$ERROR_MSG"}";may_die "${ret}" "${ret}" "${msg}";
}
die_in_error() { die_in_error_ "${?}" "${@}"; }
test_silent_log() { ( [[ -z ${NO_SILENT-} ]] && ( [[ -n ${SILENT_LOG-} ]] || [[ -n "${SILENT_DEBUG}" ]] ) ); }
test_silent() { ( [[ -z ${NO_SILENT-} ]] && ( [[ -n ${SILENT-} ]] || test_silent_log ) ); }
silent_run_post() { if [ -e "${tmpf}" ];then rm -f "${tmpf}";fi; }
silent_run_() {
    tmpf=$(mktemp)
    local ret=
    if ! test_silent;then
        "${@}"
        ret=${?}
    else
        do_trap silent_run_post EXIT TERM QUIT INT
        if test_silent_log;then
            log "Logging command output to ${tmpf}"
        fi
        "${@}" >"${tmpf}" 2>&1
        ret=${?}
        if [ "x${ret}" != "x0" ] && [ -e "${tmpf}" ]; then
            cat "${tmpf}"
        fi
    fi
    return ${ret}
}
silent_run() { ( silent_run_ "${@}" ; ); }
run_silent() { SILENT=${SILENT-1} silent_run "${@}"; }
vvv() { debug "${@}";silent_run "${@}"; }
vv() { log "${@}";silent_run "${@}";}

usage () {
    NO_HEADER=y die '
Refresh files to various roles

    '"$0"'
'
}

parse_cli() {
    parse_cli_common "${@}"
}
parse_cli "$@"
cd $W
for i in bin/cops_reset_passwords.sh;do
    cp $i hacking/container_rootfs/sbin
done
for i in hacking/container_rootfs/sbin/cops_reset-host.py bin/cops_pkgmgr_install.sh bin/cops_shell_common;do
    df=roles/corpusops.roles/lxc_create/templates/$(echo "$i"|sed -re "s/.*s?(bin.*)/\1/g")
    d=$(dirname "$df")
    if [ ! -e $d ];then mkdir -p $d;fi
    cp -vf $i $df
done
for i in hacking/container_rootfs/sbin/cops_container_{snapshot,strip}.sh;do
    df=roles/corpusops.roles/lxc_snapshot/templates/$(echo "$i"|sed -re "s/.*s?(bin.*)/\1/g")
    d=$(dirname "$df")
    if [ ! -e $d ];then mkdir -p $d;fi
    cp -vf $i $df
done
for r in \
    $W \
    $W/roles/corpusops.roles/lxc_snapshot \
    $W/roles/corpusops.roles/lxc_create;do
    if ! ( cd $r && git diff --exit-code >/dev/null 2>&1 ); then
        warn "commit $r"
    fi
done
log 'done'
# vim:set et sts=4 ts=4 tw=80 ft=sh:

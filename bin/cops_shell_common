#!/usr/bin/env bash

# W is script_dir/..
W=${W:-$(pwd)}
# OW: from where script was called (must be defined from callee)
OW="${OW:-${W}}"
RED="\\e[0;31m"
CYAN="\\e[0;36m"
YELLOW="\\e[0;33m"
NORMAL="\\e[0;0m"
NO_COLOR=${NO_COLORS-${NO_COLORS-${NOCOLOR-${NOCOLORS-}}}}
LOGGER_NAME=${LOGGER_NAME:-corpusops_build}
ERROR_MSG="There were errors"
ANSIBLE_FILTER_OUTPUT="(^("
ANSIBLE_FILTER_OUTPUT="${ANSIBLE_FILTER_OUTPUT}(included|skipping):|"
ANSIBLE_FILTER_OUTPUT="${ANSIBLE_FILTER_OUTPUT}(task|play)\s+(recap|\[(debug|all|include|setup)\])|"
ANSIBLE_FILTER_OUTPUT="${ANSIBLE_FILTER_OUTPUT}\s*$|"
ANSIBLE_FILTER_OUTPUT="${ANSIBLE_FILTER_OUTPUT}(ok|changed):\s+\[localhost\]( => {)?$|"
ANSIBLE_FILTER_OUTPUT="${ANSIBLE_FILTER_OUTPUT}\s*(\"msg|([{}]$))"
ANSIBLE_FILTER_OUTPUT="${ANSIBLE_FILTER_OUTPUT}))"

has_command() {
    ret=1
    if which which >/dev/null 2>/dev/null && which "${@}" >/dev/null 2>/dev/null;then
        ret=0
    elif command -v "${@}" >/dev/null 2>/dev/null;then
        ret=0
    elif hash -r "${@}" >/dev/null 2>/dev/null;then
        ret=0
    fi
    return ${ret}
}

get_command() {
    local p=
    local cmd="${@}"
    if which which >/dev/null 2>/dev/null;then
        p=$(which "${cmd}" 2>/dev/null)
    fi
    if [ "x${p}" = "x" ];then
        p=$(export IFS=:;
            echo "${PATH-}" | while read -ra pathea;do
                for pathe in "${pathea[@]}";do
                    pc="${pathe}/${cmd}";
                    if [ -x "${pc}" ]; then
                        p="${pc}"
                    fi
                done
                if [ "x${p}" != "x" ]; then echo "${p}";break;fi
            done )
    fi
    if [ "x${p}" != "x" ];then
        echo "${p}"
    fi
}

get_random_slug() {
    len=${1:-32}
    strings=${2:-'a-zA-Z0-9'}
    echo "$(cat /dev/urandom \
        | tr -dc "$strings" \
        | fold -w ${len} \
        | head -n 1)"
}

reset_colors() {
    if [[ -n ${NO_COLOR} ]]; then
        BLUE=""
        YELLOW=""
        RED=""
        CYAN=""
    fi
}

log_() {
    reset_colors
    logger_color=${1:-${RED}}
    msg_color=${2:-${YELLOW}}
    shift;shift;
    logger_slug="${logger_color}[${LOGGER_NAME}]${NORMAL} "
    if [[ -n ${NO_LOGGER_SLUG} ]];then
        logger_slug=""
    fi
    printf "${logger_slug}${msg_color}$(echo "${@}")${NORMAL}\n" >&2;
    printf "" >&2;  # flush
}

log() {
    log_ "${RED}" "${CYAN}" "${@}"
}

warn() {
    log_ "${RED}" "${CYAN}" "${YELLOW}[WARN] ${@}${NORMAL}"
}

may_die() {
    reset_colors
    thetest=${1:-1}
    rc=${2:-1}
    shift
    shift
    if [ "x${thetest}" != "x0" ]; then
        if [[ -z "${NO_HEADER-}" ]]; then
            NO_LOGGER_SLUG=y log_ "" "${CYAN}" "Problem detected:"
        fi
        NO_LOGGER_SLUG=y log_ "${RED}" "${RED}" "$@"
        exit $rc
    fi
}

die() {
    may_die 1 1 "${@}"
}

die_in_error_() {
    ret=${1}
    shift
    msg="${@:-"$ERROR_MSG"}"
    may_die "${ret}" "${ret}" "${msg}"
}

die_in_error() {
    die_in_error_ "${?}" "${@}"
}

debug() {
    if [[ -n "${DEBUG// }" ]];then
        log_ "${YELLOW}" "${YELLOW}" "${@}"
    fi
}

test_silent_log() {
    ( [[ -n ${SILENT_LOG-} ]] || [[ -n "${SILENT_DEBUG}" ]] )
}

test_silent() {
    ( [[ -n ${SILENT-} ]] || test_silent_log )
}

silent_run_post() {
    if [ -e "${tmpf}" ];then rm -f "${tmpf}";fi
}

silent_run_() {
    tmpf=$(mktemp)
    do_trap silent_run_post EXIT TERM QUIT INT
    if [[ -n "${NO_SILENT-}" ]];then
        "${@}"
    else
        if test_silent_log;then
            log "Logging command output to ${tmpf}"
        fi
        "${@}" >"${tmpf}" 2>&1
    fi
    local ret=${?}
    if [ "x${ret}" != "x0" ] && [ -e "${tmpf}" ]; then
        cat "${tmpf}"
    fi
    return ${ret}
}

silent_run() {
    ( silent_run_ "${@}" ; )
}

vvv() {
    debug "${@}"
    if test_silent;then
        silent_run "${@}"
    else
        "${@}"
    fi
}

vv() {
    log "${@}"
    if test_silent;then
        silent_run "${@}"
    else
        "${@}"
    fi
}

usage() {
    die 128 "No usage found"
}

cleanup_docker_tag() {
    echo "${@}" | sed -re "s/\.|[-_]//g" \
        | awk '{print tolower($0)}'
}

parse_cli_common() {
    USAGE=
    for i in ${@-};do
        case ${i} in
            --no-color|--no-colors|--nocolor|--no-colors)
                NO_COLOR=1;;
            -h|--help)
                USAGE=1;;
            *) :;;
        esac
    done
    reset_colors
    if [[ -n ${USAGE} ]]; then
        usage
    fi
}

parse_cli() {
    parse_cli_common "${@}"
}

get_chrono() {
    date "+%F_%H-%M-%S"
}

get_full_chrono() {
    date "+%F_%H-%M-%S-%N"
}

get_images() {
    docker images --no-trunc -q "${@}" 2>/dev/null | sort -u
}

get_image() {
    get_images "${@}" | head -n 1
}

get_docker_ids() {
    docker inspect -f '{{.Id}}' "${@}" 2>/dev/null
}

sane_container_name() {
    local n=${1}
    n=${n//:/}
    n=${n//_/}
    n=${n//-/}
    n=${n//\//}
    n=${n//\./}
    echo $n
}

get_container_id() {
    local n=${1}
    local cid=$(docker     ps -q -a --filter 'name='$n)
    echo "${cid}"
}

save_container() {
    local n="${1}"
    local d="${2:-${n}}"
    local running=$(docker ps -q    --filter 'name='$n)
    if [[ -n "${running}" ]];then
        vv docker kill "${running}"
    fi
    local cid=$(get_container_id $n)
    if [[ -n "${cid}" ]];then
        vv docker commit "$cid" "$d"
        vv docker rm "$cid"
    else
        img=${initial_img}
    fi
}

do_tmp_cleanup() {
    local tmp_dockers=$2
    local tmp_files=$1
    local tmp_imgs=$3
    log "Post cleanup"
    for tmp_file in ${tmp_files};do
        if [ -e "${tmp_file}" ]; then
            vv rm -f "${tmp_file}"
        fi
    done
    for test_docker in ${tmp_dockers};do
        test_dockerid=$(vvv get_container_id ${test_docker})
        if [[ "${test_dockerid}" != "" ]]; then
            log "Removing produced test docker ${test_docker}"
            docker rm -f "${test_dockerid}"
        fi
    done
    for test_tag in ${tmp_imgs};do
        test_tagid=$(vvv get_image ${test_tag})
        if [[ "${test_tagid}" != "" ]]; then
            log "Removing produced test image: ${test_tag}"
            docker rmi "${test_tagid}"
        fi
    done
}

set_lang() {
    locale=${1:-C}
    export LANG=${locale}
    export LC_ALL=${locale}
}

detect_os() {
    # this function should be copiable in other scripts, dont use adjacent functions
    UNAME="${UNAME:-"$(uname | awk '{print tolower($1)}')"}"
    PATH="${PATH}:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"
    SED="sed"
    if [ "x${UNAME}" != "xlinux" ] && hash -r gsed >/dev/null 2>&1; then
        SED=gsed
    fi
    DISTRIB_CODENAME=""
    DISTRIB_ID=""
    DISTRIB_RELEASE=""
    if hash -r lsb_release >/dev/null 2>&1; then
        DISTRIB_ID=$(lsb_release -si)
        DISTRIB_CODENAME=$(lsb_release -sc)
        DISTRIB_RELEASE=$(lsb_release -sr)
    elif [ -e /etc/lsb-release ];then
        debug "No lsb_release, sourcing manually /etc/lsb-release"
        DISTRIB_ID=$(. /etc/lsb-release;echo ${DISTRIB_ID})
        DISTRIB_CODENAME=$(. /etc/lsb-release;echo ${DISTRIB_CODENAME})
        DISTRIB_RELEASE=$(. /etc/lsb-release;echo ${DISTRIB_RELEASE})
    elif [ -e /etc/os-release ];then
        DISTRIB_ID=$(. /etc/os-release;echo $ID)
        DISTRIB_CODENAME=$(. /etc/os-release;echo $VERSION)
        DISTRIB_CODENAME=$(echo $DISTRIB_CODENAME |sed -e "s/.*(\([^)]\+\))/\1/")
        DISTRIB_RELEASE=$(. /etc/os-release;echo $VERSION_ID)
    elif [ -e /etc/redhat-release ];then
        RHRELEASE=$(cat /etc/redhat-release)
        DISTRIB_CODENAME=${RHRELEASE}
        DISTRIB_RELEASE=${RHRELEASE}
        DISTRIB_ID=${RHRELEASE}
        DISTRIB_CODENAME=$(echo $DISTRIB_CODENAME |sed -e "s/.*(\([^)]\+\))/\1/")
        DISTRIB_RELEASE=$(echo $DISTRIB_RELEASE |sed -e "s/release \([0-9]\)/\1/")
        DISTRIB_ID=$(echo $DISTRIB_ID | awk '{print tolower($1)}')
    else
        if ! ( echo ${@-} | grep -q no_fail );then
            die "unespected case, no lsb_release"
        fi
    fi
    export DISTRIB_ID DISTRIB_CODENAME DISTRIB_RELEASE
}

is_archlinux_like() {
    echo $DISTRIB_ID | egrep -iq "archlinux"
}

is_debian_like() {
    echo $DISTRIB_ID | egrep -iq "debian|ubuntu|mint"
}

is_redhat_like() {
    echo $DISTRIB_ID | egrep -iq "fedora|centos|redhat|red-hat"
}

filtered_ansible_playbook_custom() {
    filter=${1:-${ANSIBLE_FILTER_OUTPUT}}
    shift
    (((( \
        vv bin/ansible-playbook  "${@}" ; echo $? >&3) \
        | egrep -iv "${filter}" >&4) 3>&1) \
        | (read xs; exit $xs)) 4>&1
    return $?
}

filtered_ansible_playbook() {
    filtered_ansible_playbook_ "" "${@}"

}

output_in_error() {
    slug_to_call="${@}"
    NO_OUTPUT="${NO_OUTPUT-}"
    DO_OUTPUT_TIMER="${DO_OUTPUT_TIMER-1}"
    if [[ -z $NO_OUTPUT ]]; then
        DO_OUTPUT_TIMER=""
    else
        LOG=$(mktemp)
    fi
    if [[ -n ${DO_OUTPUT_TIMER} ]]; then
        TMP=$(mktemp)
        ( i=0;\
          while test -f $TMP;do\
           i=$((++i));\
           if [[ $i == 120 ]];then \
             log "BuildInProgress($LOG): ${slug_to_call}";\
             i=0;\
           fi;\
           sleep 1;\
          done;\
          log "done: ${slug_to_call}"; ) &
    fi
    if [[ -n $NO_OUTPUT ]]; then
        log "Log: $LOG"
        ${slug_to_call} >"$LOG" 2>&1
        ret=${?}
        if [ -e "$LOG" ];then
            if [ "x${ret}" != "x0" ];then
                vv cat "$LOG" >&2
            fi
            rm -f "$LOG"
        fi
    else
        ${slug_to_call}
        ret=${?}
    fi
    if [[ -n $DO_OUTPUT_TIMER ]]; then
        rm -f "${TMP}"
    fi
    return ${ret}
}

get_git_changeset() {
   ( cd "${1:-$(pwd)}" &&\
     git log HEAD|head -n1|awk '{print $2}')
}

get_git_branch() {
   ( cd "${1:-$(pwd)}" &&\
     git rev-parse --abbrev-ref HEAD | grep -v HEAD || \
     git describe --exact-match HEAD 2> /dev/null || \
     git rev-parse HEAD)
}

do_trap_() {
    rc=$?
    func=$1
    sig=$2
    ${func}
    if [ "x${sig}" != "xEXIT" ];then
        kill -${sig} $$
    fi
    exit $rc
}

do_trap() {
    rc=${?}
    func=${1}
    shift
    sigs=${@}
    for sig in ${sigs};do
        trap "do_trap_ ${func} ${sig}" "${sig}"
    done
}

version_lte() {
    [  "$1" = "$(printf "$1\n$2" | sort -V | head -n1)" ]
}

version_lt() {
    [ "$1" = "$2" ] && return 1 || version_lte $1 $2
}

version_gte() {
    [  "$2" = "$(printf "$1\n$2" | sort -V | head -n1)" ]
}

version_gt() {
    [ "$1" = "$2" ] && return 1 || version_gte $1 $2
}

detect_os no_fail

if echo "${0}" | egrep -q 'cops_shell_common$';then
    if declare -f "$1" >/dev/null 2>&1; then
        "${@}"
    else
        echo Could not find function for $@
        exit 1
    fi
fi
# vim:set et sts=4 ts=4 tw=80:

# For quickier rebuilds, we isolate each step of the installation
# and their requisites; together with docker cache

FROM ubuntu:16.04
ENV container docker
ARG COPS_ROOT=/srv/corpusops/corpusops.bootstrap

# 1/ - Prebuild requirements & helpers,
#    - Make also life easier for systemd based containers
COPY requirements/os_* \
     hacking/container_rootfs/sbin/cops_container_snapshot.sh \
     hacking/container_rootfs/sbin/cops_container_cleanup.sh \
     bin/cops_shell_common \
     bin/cops_pkgmgr_install.sh \
     bin/cops_reset_passwords.sh \
     /bootstrap/
RUN step_rev=1;\
    :;\
    DISTRIB_ID=$(. /bootstrap/cops_shell_common && echo $DISTRIB_ID);\
    REQS_PATH=/bootstrap;\
    WANTED_PACKAGES="$(cat $REQS_PATH/os_packages.${DISTRIB_ID} 2>/dev/null | xargs -n1)";\
    WANTED_DOCKER_PACKAGES="$(cat $REQS_PATH/os_docker_packages.${DISTRIB_ID} 2>/dev/null | xargs -n1)";\
    WANTED_EXTRA_PACKAGES="$(cat $REQS_PATH/os_extra_packages.${DISTRIB_ID} 2>/dev/null | xargs -n1)";\
    :;\
    if ((which which && which systemd) || \
         command -v systemd )>/dev/null 2>&1 \
       || [ -e /lib/systemd/systemd ];then \
      WANTED_PACKAGES="systemd ${WANTED_PACKAGES}";\
    fi;\
    :;\
    set -ex;\
    DO_INSTALL='y' DO_UPGRADE='y' DO_UPDATE='y'\
      WANTED_PACKAGES="$(echo ${WANTED_PACKAGES} ${WANTED_DOCKER_PACKAGES})"\
      WANTED_EXTRA_PACKAGES="$(echo ${WANTED_EXTRA_PACKAGES})"\
        /bootstrap/cops_pkgmgr_install.sh;\
    /bootstrap/cops_container_cleanup.sh;\
    /bootstrap/cops_container_snapshot.sh;

# 2/ isolate virtualenv contruction
COPY requirements/os_* \
     requirements/python_* \
     ${COPS_ROOT}/requirements/
RUN step_rev=2;set -e;cd ${COPS_ROOT};\
    virtualenv --system-site-packages --unzip-setuptools venv;\
    . venv/bin/activate;\
    :;\
    set -x;\
    pip install -U pip;\
    pip install -U -r requirements/python_requirements.txt;\
    set +x;\
    :;\
    /bootstrap/cops_container_snapshot.sh;

# 3/ Run install script to finish installation
# We remove a package (git) to test the system install routines
COPY .corpusops ${COPS_ROOT}/.corpusops
COPY bin ${COPS_ROOT}/bin
COPY src ${COPS_ROOT}/src
COPY setup.py ${COPS_ROOT}/setup.py
RUN step_rev=2;set -ex;\
    DISTRIB_ID=$(set +x && . /bootstrap/cops_shell_common && echo $DISTRIB_ID);\
    cd ${COPS_ROOT};\
    :;\
    if echo ${DISTRIB_ID} | egrep -iq "ubuntu|debian";then\
        apt-get remove -y --force-yes git;\
        apt-get update -qq;\
    fi;\
    :;\
    bin/install.sh -C --skip-sync-code;\
    :;\
    /bootstrap/cops_container_snapshot.sh;\
    rm -rf /bootstrap;

# 4/ Bring in all playbooks & roles
COPY .git ${COPS_ROOT}/.git
COPY roles ${COPS_ROOT}/roles
COPY playbooks ${COPS_ROOT}/playbooks
RUN step_rev=3;set -ex;\
    cd ${COPS_ROOT};\
    git reset --hard HEAD;\
    bin/install.sh -C --only-sync-code;\
    hacking/container_rootfs/sbin/cops_container_snapshot.sh;

# Now copy all rootfs helpers & make the container a good systemd / process
# manager citizen
RUN step_rev=1;set -ex;\
    cd ${COPS_ROOT}/;\
    cp bin/cops_reset_passwords.sh /sbin;\
    rsync -av hacking/container_rootfs/ /;\
    /sbin/cops_container_activate_core_services.sh;\
    /sbin/cops_container_cleanup.sh;\
    /sbin/cops_container_snapshot.sh;

# pack any found git repo
RUN step_rev=1;set -ex;${COPS_ROOT}/bin/git_pack /;\
    /sbin/cops_container_cleanup.sh;\
    /sbin/cops_container_snapshot.sh;
# vim:set et:

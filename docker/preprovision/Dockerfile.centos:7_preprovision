# For quickier rebuilds, we isolate each step of the installation
# and their requisites; together with docker cache

FROM centos:7
ENV container docker
ENV PYTHONUNBUFFERED=1
ENV ANSIBLE_FORCE_COLOR=true
ARG COPS_ROOT=/srv/corpusops/corpusops.bootstrap
ENV COPS_ROOT $COPS_ROOT
ENV COPS_APPLY_ROLE "${COPS_ROOT}/bin/cops_apply_role -vvvv"

# 1/ - Prebuild requirements & helpers,
#    - Make also life easier for systemd based containers
COPY requirements/os_* \
     hacking/container_rootfs/sbin/cops_container_snapshot.sh \
     hacking/container_rootfs/sbin/cops_container_strip.sh \
     hacking/container_rootfs/sbin/cops_container_cleanup.sh \
     hacking/container_rootfs/sbin/cops_container_disable_networkifacesscripts.sh \
     bin/cops_shell_common \
     bin/cops_pkgmgr_install.sh \
     bin/cops_reset_passwords.sh \
     /bootstrap/
RUN bash -c 'step_rev=3;\
    :;\
    silent() { SILENT=1 /bootstrap/cops_shell_common vv "${@}"; };\
    cd /bootstrap;\
    DISTRIB_ID=$(. cops_shell_common && echo $DISTRIB_ID);\
    if [ "x$DISTRIB_ID" = "x" ]; then exit 139;fi;\
    WANTED_PACKAGES="$(cat os_packages.${DISTRIB_ID} 2>/dev/null | xargs -n1)";\
    WANTED_DOCKER_PACKAGES="$(cat os_docker_packages.${DISTRIB_ID} 2>/dev/null | xargs -n1)";\
    WANTED_EXTRA_PACKAGES="$(cat os_extra_packages.${DISTRIB_ID} 2>/dev/null | xargs -n1)";\
    :;\
    if ((which which && which systemd) || \
         command -v systemd )>/dev/null 2>&1 \
       || [ -e /lib/systemd/systemd ];then \
      WANTED_PACKAGES="systemd dbus ${WANTED_PACKAGES}";\
    fi;\
    :;\
    WANTED_PACKAGES="${WANTED_PACKAGES} ${WANTED_DOCKER_PACKAGES}";\
    export WANTED_PACKAGES WANTED_EXTRA_PACKAGES;\
    set -e;\
    echo "packages: " $WANTED_PACKAGES >&2;\
    echo "extras: "$WANTED_EXTRA_PACKAGES >&2;\
    DO_INSTALL=y DO_UPGRADE=y DO_UPDATE=y silent ./cops_pkgmgr_install.sh;\
    :;\
    silent ./cops_container_disable_networkifacesscripts.sh'

# 2/ configure python & isolate virtualenv contruction
# the python diffs are to fix ipv6 error (cant bind address)
COPY hacking/patches/python*.diff \
     requirements/os_* \
     requirements/python_* \
     ${COPS_ROOT}/requirements/
RUN bash -c 'step_rev=2;set -e;\
    silent() { SILENT=1 /bootstrap/cops_shell_common vv "${@}"; };\
    pos=;if [ -e /etc/redhat-release ];then pos=.rh;fi;\
    rhpyvers="36";pypkgs="";\
    if [ "x${pos}" = "x.rh" ];then \
        for i in ${rhpyvers};do pypkgs="$pypkgs python${i}u-test python${i}u-libs python${i}u-pip python${i}u-devel";done;\
        yum -y install https://centos7.iuscommunity.org/ius-release.rpm;\
    fi;\
    if [ "x${pypkgs}" != "x" ];then /bootstrap/cops_pkgmgr_install.sh $pypkgs;fi;\
    while read f;do \
        cd "$f";\
        pyver=3;\
        applypatch=;\
        if [ -e test/support/__init__.py ] \
        && grep -q "^    if socket.has_ipv6" test/support/__init__.py;then\
            applypatch=1;\
        fi;\
        p="$COPS_ROOT/requirements/python${pyver}${pos}.diff";\
        if [ "x${applypatch}" != "x" ];then\
            echo "Patching $f W $p" >&2;patch -fp4 < $p;\
        fi;\
    done < <(ls -d /usr/lib*/python3* 2>/dev/null);\
    while read f;do \
        cd "$f";\
        applypatch=;\
        pyver=2;\
        if [ -e test/test_support.py ] \
        && grep -q "^    if socket.has_ipv6" test/test_support.py;then\
            applypatch=1;\
        fi;\
        p="$COPS_ROOT/requirements/python${pyver}${pos}.diff";\
        if [ "x${applypatch}" != "x" ];then\
            echo "Patching $f W $p" >&2;patch -fp4 < $p;\
        fi;\
    done < <(ls -d /usr/lib*/python2* 2>/dev/null);\
    cd ${COPS_ROOT};\
    silent virtualenv --system-site-packages --unzip-setuptools venv;\
    . venv/bin/activate;\
    :;\
    silent python -c "from test import test_support";\
    silent pip install -U pip;\
    silent pip install -U -r requirements/python_requirements.txt;'

# 3/ Run install script to finish installation
# We remove a package (git) to test the system install routines
COPY .corpusops ${COPS_ROOT}/.corpusops
COPY bin ${COPS_ROOT}/bin
COPY src ${COPS_ROOT}/src
COPY setup.py ${COPS_ROOT}/setup.py
RUN bash -c 'step_rev=2;set -e;\
    silent() { SILENT=1 $COPS_ROOT/bin/cops_shell_common vv "${@}"; };\
    DISTRIB_ID=$(. /bootstrap/cops_shell_common && echo $DISTRIB_ID);\
    cd ${COPS_ROOT};\
    :;\
    silent bin/install.sh -C --skip-sync-code;\
    :;\
    rm -rf /bootstrap;'

# 4/ Bring in all playbooks & roles
COPY .git ${COPS_ROOT}/.git
COPY roles ${COPS_ROOT}/roles
RUN bash -c 'step_rev=3;set -e;\
    silent() { SILENT=1 $COPS_ROOT/bin/cops_shell_common vv "${@}"; };\
    cd $COPS_ROOT;\
    : be sure every file is in place;\
    silent git reset --hard HEAD;\
    : DISABLED, use only local checkout;\
    : bin/install.sh -C --only-sync-code;'

# Now copy all rootfs helpers & make the container a good systemd / process
# manager citizen
RUN bash -c 'step_rev=3;set -e;\
    silent() { SILENT=1 $COPS_ROOT/bin/cops_shell_common vv "${@}"; };\
    silent $COPS_ROOT/hacking/sync_files ;\
    silent rsync -av $COPS_ROOT/hacking/container_rootfs/ /;\
    silent /sbin/cops_container_activate_core_services.sh;'

# pack, cleanup, snapshot any found git repo
RUN bash -c 'step_rev=3;set -e;\
    silent() { SILENT=1 $COPS_ROOT/bin/cops_shell_common vv "${@}"; };\
    /sbin/cops_container_strip.sh\
    silent /sbin/cops_container_disable_networkifacesscripts.sh;\
    silent /sbin/cops_container_cleanup.sh;\
    silent /sbin/cops_container_snapshot.sh;'

# You have to mount -v /sys/fs/cgroup:/sys/fs/cgroup:ro
STOPSIGNAL SIGRTMIN+3
CMD ["/entry_point"]
# vim:set et:

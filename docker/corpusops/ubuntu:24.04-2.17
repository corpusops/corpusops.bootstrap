# For quickier rebuilds, we isolate each step of the installation
# and their requisites; together with docker cache

ARG RSYNC=corpusops/rsync
FROM corpusops/ubuntu:24.04_preprovision-2.17 AS base
FROM base AS final

# Rewarm apt cache
RUN bash -c '\
  if grep -E -qi "ubuntu|mint|debian" /etc/*-release 2>/dev/null;then\
      apt-get update -y -qq;\
      if [ "x${PKGS_REMOVES-}" != "x" ];then\
        apt-get install -y $PKGS_REMOVES;\
      fi;\
  fi'

ARG FORCE_ONLINE=
ARG NO_OUTPUT=y
ARG KEEP_DOCKERD=no
ARG ANSIBLE_PYTHON_INTERPRETER=python3
## Refresh files
ADD hacking/      $COPS_ROOT/hacking/
ADD bin/          $COPS_ROOT/bin/
ADD src/          $COPS_ROOT/src/
ADD playbooks/    $COPS_ROOT/playbooks/
ADD docs/         $COPS_ROOT/docs/
ADD collections/  $COPS_ROOT/collections/
ADD roles/        $COPS_ROOT/roles/
ADD requirements/ $COPS_ROOT/requirements/

# Be sure that system python is capable of SSL SNI connections
# and apt is configured, and has installed base packages
RUN bash -c 'step_rev=2;set -ex;\
    : reinstall py build prereqs;\
    pip3 uninstall -y ipaddr docker-py;\
    export A_ENV_NAME="docker";\
    export A_INVENTORY="localhost,";\
    $COPS_ROOT/bin/install.sh -C --skip-sync-code'
RUN bash -c 'set -e;\
    $_apply_role \
     ${COPS_ROOT}/roles/corpusops.roles/localsettings_pkgmgr/role.yml\
     ${COPS_ROOT}/roles/corpusops.roles/localsettings_basepkgs/role.yml\
     ${COPS_ROOT}/roles/corpusops.roles/localsettings_python_sni/role.yml'

# Install docker client for dind(sibling via docker socket) workflows
ARG DOCKER_CREDS_HELPER_URL="https://raw.githubusercontent.com/corpusops/docker-gitlabtools/main/rootfs/common/bin/docker-credential-copsgitlab"
RUN bash -c 'step_rev=2;set -e;\
    export A_ENV_NAME="docker";\
    export A_INVENTORY="localhost,";\
    curl  "${DOCKER_CREDS_HELPER_URL}">/bin/docker-credential-copsgitlab && chmod +x /bin/docker-credential-copsgitlab;\
    $_apply_role ${COPS_ROOT}/roles/corpusops.roles/localsettings_docker/role.yml \
      -e "{corpusops_localsettings_docker_has_docker_py: true}"'
ARG BUILDX_VERSION=latest
COPY --from=docker/buildx-bin:latest /buildx /usr/libexec/docker/cli-plugins/docker-buildx

# Disable docker service in base image
RUN bash -c 'rm -vf \
  /etc/rc*.d/*docker \
  /lib/systemd/*/*wants/docker* \
  /etc/systemd/*/*wants/docker* \
  && if [ -e /etc/init ];then echo manual > /etc/init/docker.override;fi'

# Make the docker image a preconfigured-for-production image
RUN bash -c 'step_rev=2;set -e;\
    $_apply_role ${COPS_ROOT}/roles/corpusops.roles/playbooks/provision/server.yml'

# pack, cleanup, snapshot any found git repo
ADD docker/       $COPS_ROOT/docker/
RUN bash -c 'step_rev=3;set -e;cd $COPS_ROOT;\
    if [ "x$KEEP_DOCKERD" = "xno" ];then \
      rm -f /usr/bin/docker-containerd; \
      rm -f /usr/bin/docker-containerd-ctr; \
      rm -f /usr/bin/docker-containerd-shim; \
      rm -f /usr/bin/docker-init; \
      rm -f /usr/bin/docker-proxy; \
      rm -f /usr/bin/docker-runc; \
      rm -f /usr/bin/dockerd; \
    fi; \
    export LDISTRIB_ID=$(echo $DISTRIB_ID|awk '"'{print tolower("'$0'")}'"' );\
    PKGS_REMOVES="gcc \
        $(cat req*/os_packages_dev.$LDISTRIB_ID 2>/dev/null | xargs -n1)" \
    DEV_AUTOREMOVE=y \
    GIT_GC_AGGRESSIVE= \
    GIT_SHALLOW_DEPTH=1 \
    GIT_SHALLOW=y \
    NO_IMAGE_STRIP= \
        /sbin/cops_container_strip.sh'

# SQUASH Stage
FROM $RSYNC AS squashed-rsync
FROM base AS squashed-ancestor
ARG ROOTFS="/BASE_ROOTFS_TO_COPY_THAT_WONT_COLLIDE_1234567890"
ARG PATH="${ROOTFS}_rsync/bin:$PATH"
RUN --mount=type=bind,from=final,target=$ROOTFS --mount=type=bind,from=squashed-rsync,target=${ROOTFS}_rsync \
rsync -Aaz --delete ${ROOTFS}/ / --exclude=/proc --exclude=/sys --exclude=/etc/resolv.conf --exclude=/etc/hosts --exclude=$ROOTFS* --exclude=dev/shm --exclude=dev/pts --exclude=dev/mqueue
STOPSIGNAL SIGRTMIN+3
ENV PATH=$COPS_ROOT/bin:$COPS_ROOT/venv/bin:$PATH
CMD ["/entry_point"]
# vim:set et ft=Dockerfile:

# For quickier rebuilds, we isolate each step of the installation
# and their requisites; together with docker cache

ARG RSYNC=corpusops/rsync
FROM corpusops/debian-bare:latest AS base

ARG FORCE_ONLINE=
ARG USE_VENV=yes
ARG COPS_ROOT=/srv/corpusops/corpusops.bootstrap
ARG PYTHONUNBUFFERED=1
ARG ANSIBLE_PYTHON_INTERPRETER=python3
ARG NONINTERACTIVE="y"
ARG DEFAULT_A_VERBOSITY=""
ARG GPG_KEYS=B42F6819007F00F88E364FD4036A9C25BF357DD4
ARG GPG_KEYS_SERVERS="hkp://p80.pool.sks-keyservers.net:80 hkp://ipv4.pool.sks-keyservers.net hkp://pgp.mit.edu:80"

ENV USE_VENV=$USE_VENV
ENV FORCE_ONLINE=$FORCE_ONLINE
ENV container=docker
ENV ANSIBLE_PYTHON_INTERPRETER=$ANSIBLE_PYTHON_INTERPRETER
ENV ANSIBLE_FORCE_COLOR=true
ENV PYTHONUNBUFFERED=$PYTHONUNBUFFERED
ENV NONINTERACTIVE=$NONINTERACTIVE
ENV COPS_ROOT=$COPS_ROOT
ENV A_VERBOSITY="$DEFAULT_A_VERBOSITY"
ENV _cops_ar="$COPS_ROOT/bin/cops_apply_role"
ENV _sapply_role="$COPS_ROOT/bin/silent_run $_cops_ar $A_VERBOSITY"
ENV _apply_role="$_cops_ar $A_VERBOSITY"
ENV _silent_run="$COPS_ROOT/bin/silent_run"
ENV _call_ansible=".ansible/scripts/call_ansible.sh $A_VERBOSITY"
ENV _call_roles=".ansible/scripts/call_roles.sh     $A_VERBOSITY"

FROM base AS preprovision
ARG NO_OUTPUT=y
# 1/ - Prebuild requirements & helpers,
#    - Make also life easier for systemd based containers
COPY requirements/os_* $COPS_ROOT/requirements/
COPY hacking/docker_toggle_pm $COPS_ROOT/hacking/
COPY bin/cops_detect_os bin/cops_pkgmgr_install.sh $COPS_ROOT/bin/
RUN bash -c 'step_rev=3;cd $COPS_ROOT/requirements;\
    :;\
    : define DISTRIB_ID;. $COPS_ROOT/bin/cops_detect_os;\
    export LDISTRIB_ID=$(echo $DISTRIB_ID|awk '"'{print tolower("'$0'")}'"' );\
    WANTED_PACKAGES="$(cat os_packages.${LDISTRIB_ID} \
                           2>/dev/null | xargs -n1)";\
    WANTED_DOCKER_PACKAGES="$(cat os_docker_packages.${LDISTRIB_ID} 2>/dev/null | xargs -n1)";\
    WANTED_EXTRA_PACKAGES="$(cat os_extra_packages.${LDISTRIB_ID} \
                                 os_packages_dev.${LDISTRIB_ID} 2>/dev/null | xargs -n1)";\
    :;\
    if ((which which && which systemd) \
       ||  command -v systemd )>/dev/null 2>&1 \
       || ( echo $LDISTRIB_ID|grep -E -iq debian ) \
       || ( [ -e /lib/systemd/system ]  && [ ! -e /lib/init/upstart-job ]; ) \
       || ( [ -e /lib/systemd/systemd ] && [ ! -e /lib/init/upstart-job ]; ) ;then \
      WANTED_PACKAGES="systemd dbus ${WANTED_PACKAGES}";\
      if  ( echo $LDISTRIB_ID|grep -E -iq "debian|ubuntu|mint"; );then \
        WANTED_PACKAGES="libpam-systemd systemd-sysv ${WANTED_PACKAGES}"; \
      fi \
    fi;\
    :;\
    WANTED_PACKAGES="${WANTED_PACKAGES} ${WANTED_DOCKER_PACKAGES}";\
    export WANTED_PACKAGES WANTED_EXTRA_PACKAGES;\
    set -e;\
    echo "packages: " $WANTED_PACKAGES >&2;\
    echo "extras: "$WANTED_EXTRA_PACKAGES >&2;\
    DO_INSTALL=y DO_UPGRADE=y DO_UPDATE=y SILENT=1 \
      $COPS_ROOT/bin/cops_pkgmgr_install.sh'

# for now, we rely on rebasing on -bare flavors which already include those scripts
# RUN bash -c 'set -ex \
#     : "install docker-images tools (https://github.com/corpusops/docker-images)" \
#     && git clone --depth=1 https://github.com/corpusops/docker-images \
#     && cd ./docker-images \
#     && helpers/add_gosu.sh \
#     && helpers/add_dockerize.sh \
#     && helpers/add_forego.sh \
#     && helpers/setup_locales.sh \
#     && cd - && rm -rf docker-images'

# 2/ configure python & isolate virtualenv contruction
# the python diffs are to fix ipv6 error (cant bind address)
COPY hacking/patches/python*.diff \
     requirements/os_* \
     ${COPS_ROOT}/requirements/
COPY bin/silent_run $COPS_ROOT/bin/
RUN bash -c 'step_rev=3;cd $COPS_ROOT;\
    pos=;if [ -e /etc/redhat-release ];then pos=.rh;fi;\
    rhpyvers="36";pypkgs="";\
    if [ "x${pos}" = "x.rh" ];then \
        for i in ${rhpyvers};do pypkgs="$pypkgs python${i}u-test python${i}u-libs python${i}u-pip python${i}u-devel";done;\
        yum -y install https://centos7.iuscommunity.org/ius-release.rpm;\
    fi;\
    if [ "x${pypkgs}" != "x" ];then $COPS_ROOT/bin/cops_pkgmgr_install.sh $pypkgs;fi;\
    while read f;do \
        cd "$f";\
        pyver=3;\
        applypatch=;\
        if [ -e test/support/__init__.py ] \
        && grep -q "^    if socket.has_ipv6" test/support/__init__.py;then\
            applypatch=1;\
        fi;\
        p="$COPS_ROOT/requirements/python${pyver}${pos}.diff";\
        if [ "x${applypatch}" != "x" ];then\
            echo "Patching $f W $p" >&2;patch -fp4 < $p;\
        fi;\
    done < <(ls -d /usr/lib*/python3* 2>/dev/null);\
    while read f;do \
        cd "$f";\
        applypatch=;\
        pyver=2;\
        if [ -e test/test_support.py ] \
        && grep -q "^    if socket.has_ipv6" test/test_support.py;then\
            applypatch=1;\
        fi;\
        p="$COPS_ROOT/requirements/python${pyver}${pos}.diff";\
        if [ "x${applypatch}" != "x" ];then\
            echo "Patching $f W $p" >&2;patch -fp4 < $p;\
        fi;\
    done < <(ls -d /usr/lib*/python2* 2>/dev/null);'

# 3/ Run install script to finish installation
# We remove a package (git) to test the system install routines
COPY .corpusops ${COPS_ROOT}/.corpusops
COPY requirements/collections*yml requirements/python_* ${COPS_ROOT}/requirements/
COPY bin/install.sh bin/cops_shell_common ${COPS_ROOT}/bin/
COPY src ${COPS_ROOT}/src
COPY setup.py ${COPS_ROOT}/setup.py
RUN bash -c 'step_rev=2;set -e;cd ${COPS_ROOT};\
    bin/install.sh -C --ansible-branch stable-2.17 --skip-sync-code --use-venv $USE_VENV;'

COPY bin/ ${COPS_ROOT}/bin/
COPY roles ${COPS_ROOT}/roles
COPY collections ${COPS_ROOT}/collections

# Now copy all rootfs helpers & make the container a good systemd / process
# manager citizen
COPY hacking/container_rootfs/ $COPS_ROOT/hacking/container_rootfs/
COPY hacking/sync_files $COPS_ROOT/hacking/
COPY requirements/ $COPS_ROOT/requirements/
RUN bash -c 'step_rev=3;set -e;cd $COPS_ROOT;\
    if [ "x${USE_VENV}" != "xno" ];then for i in $COPS_ROOT/bin/*;do ln -sf $i /usr/local/bin;done;fi;\
    VERBOSE=y $_silent_run $COPS_ROOT/hacking/sync_files;\
    VERBOSE=y $_silent_run rsync -aK hacking/container_rootfs/ /;\
    VERBOSE=y $_silent_run /sbin/cops_container_activate_core_services.sh;\
    VERBOSE=y $_silent_run /sbin/cops_container_disable_networkifacesscripts.sh;'


FROM preprovision AS final
ARG KEEP_DOCKERD=no
ARG NO_OUTPUT=y
# 4/ Bring in all rest of reepository, roles & collections
COPY .git ${COPS_ROOT}/.git
RUN bash -c 'step_rev=3;set -e;cd $COPS_ROOT;\
   : be sure every file is in place;\
   if [ ! -e roles/corpusops.roles/.git ];then rm -rf roles/corpusops.roles || true;VERBOSE=y $COPS_ROOT/bin/install.sh -C -s --skip-sync-ansible --skip-sync-core --skip-prereqs --skip-venv;fi;\
   git reset --hard HEAD;\
   ln -sf $COPS_ROOT/roles/corpusops.roles/playbooks $COPS_ROOT/playbooks/corpusops;'

# Be sure that system python is capable of SSL SNI connections
# and apt is configured, and has installed base packages
ADD docs/         $COPS_ROOT/docs/
RUN bash -c 'step_rev=2;set -ex;\
    : reinstall py build prereqs;\
    for i in ipaddr docker-py;do pip3 uninstall -y $i || true;done;\
    export A_ENV_NAME="docker";\
    export A_INVENTORY="localhost,";\
    $COPS_ROOT/bin/install.sh -C --skip-sync-code'
RUN bash -c 'set -e;\
    $_apply_role \
     ${COPS_ROOT}/roles/corpusops.roles/localsettings_pkgmgr/role.yml\
     ${COPS_ROOT}/roles/corpusops.roles/localsettings_basepkgs/role.yml\
     ${COPS_ROOT}/roles/corpusops.roles/localsettings_python_sni/role.yml'

# Install docker client for dind(sibling via docker socket) workflows
ARG DOCKER_CREDS_HELPER_URL="https://raw.githubusercontent.com/corpusops/docker-gitlabtools/main/rootfs/common/bin/docker-credential-copsgitlab"
RUN bash -c 'step_rev=2;set -e;\
    export A_ENV_NAME="docker";\
    export A_INVENTORY="localhost,";\
    curl  "${DOCKER_CREDS_HELPER_URL}">/bin/docker-credential-copsgitlab && chmod +x /bin/docker-credential-copsgitlab;\
    $_apply_role ${COPS_ROOT}/roles/corpusops.roles/localsettings_docker/role.yml \
      -e "{corpusops_localsettings_docker_has_docker_py: true}"'
ARG BUILDX_VERSION=latest
COPY --from=docker/buildx-bin:latest /buildx /usr/libexec/docker/cli-plugins/docker-buildx

# Disable docker service in base image
RUN bash -c 'rm -vf \
  /etc/rc*.d/*docker \
  /lib/systemd/*/*wants/docker* \
  /etc/systemd/*/*wants/docker* \
  && if [ -e /etc/init ];then echo manual > /etc/init/docker.override;fi'

# Make the docker image a preconfigured-for-production image
RUN bash -c 'step_rev=2;set -e;\
    $_apply_role ${COPS_ROOT}/roles/corpusops.roles/playbooks/provision/server.yml'

# pack, cleanup, snapshot any found git repo
ADD docker/       $COPS_ROOT/docker/
RUN bash -c 'step_rev=3;set -e;cd $COPS_ROOT;\
    if [ "x$KEEP_DOCKERD" = "xno" ];then \
      rm -f /usr/bin/docker-containerd; \
      rm -f /usr/bin/docker-containerd-ctr; \
      rm -f /usr/bin/docker-containerd-shim; \
      rm -f /usr/bin/docker-init; \
      rm -f /usr/bin/docker-proxy; \
      rm -f /usr/bin/docker-runc; \
      rm -f /usr/bin/dockerd; \
    fi; \
    for i in /root/.local;do rm -rf $i || true;done;\
    export LDISTRIB_ID=$(echo $DISTRIB_ID|awk '"'{print tolower("'$0'")}'"' );\
    cd "$COPS_ROOT";\
    sed -i "/extraheader/ d" .git/config;\
    rm -f /etc/systemd/system/getty.target.wants/getty@tty1.service || true;\
    PKGS_REMOVES="gcc \
        $(cat req*/os_packages_dev.$LDISTRIB_ID 2>/dev/null | xargs -n1)" \
    DEV_AUTOREMOVE=y \
    GIT_GC_AGGRESSIVE= \
    GIT_SHALLOW_DEPTH=1 \
    GIT_SHALLOW=y \
    NO_IMAGE_STRIP= \
        /sbin/cops_container_strip.sh'

# SQUASH Stage
FROM $RSYNC AS squashed-rsync
FROM base AS squashed-ancestor
ARG ROOTFS="/BASE_ROOTFS_TO_COPY_THAT_WONT_COLLIDE_1234567890"
ARG PATH="${ROOTFS}_rsync/bin:$PATH"
RUN --mount=type=bind,from=final,target=$ROOTFS --mount=type=bind,from=squashed-rsync,target=${ROOTFS}_rsync \
rsync -Aaz --delete ${ROOTFS}/ / --exclude=/proc --exclude=/sys --exclude=/etc/resolv.conf --exclude=/etc/hosts --exclude=$ROOTFS* --exclude=dev/shm --exclude=dev/pts --exclude=dev/mqueue
STOPSIGNAL SIGRTMIN+3
ENV PATH=$COPS_ROOT/bin:$COPS_ROOT/venv/bin:$PATH
CMD ["/entry_point"]
# remember to use  -v /sys/fs/cgroup:/sys/fs/cgroup:ro --tmpfs /run/lock --tmpfs /run for systemd mode
# vim:set et ft=Dockerfile:

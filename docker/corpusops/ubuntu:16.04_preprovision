# For quickier rebuilds, we isolate each step of the installation
# and their requisites; together with docker cache

FROM ubuntu:16.04

ARG COPS_ROOT=/srv/corpusops/corpusops.bootstrap
ARG NO_OUTPUT=y
ARG PYTHONUNBUFFERED=1

ENV container docker
ENV COPS_ROOT $COPS_ROOT
ENV _cops_ar "$COPS_ROOT/bin/cops_apply_role"
ENV _sar "$COPS_ROOT/bin/silent_run $_cops_ar -vvvvv -ecops_vars_debug=y"
ENV _ar "$_cops_ar -vvvvv -ecops_vars_debug=y"
ENV _s "$COPS_ROOT/bin/silent_run"

# 1/ - Prebuild requirements & helpers,
#    - Make also life easier for systemd based containers
COPY requirements/os_* $COPS_ROOT/requirements/
COPY bin/cops_detect_os bin/cops_pkgmgr_install.sh $COPS_ROOT/bin/
RUN bash -c 'step_rev=3;cd $COPS_ROOT/requirements;\
    :;\
    : define DISTRIB_ID;. $COPS_ROOT/bin/cops_detect_os;\
    WANTED_PACKAGES="$(cat os_packages.${DISTRIB_ID} \
                           os_packages_dev.${DISTRIB_ID} \
                           2>/dev/null | xargs -n1)";\
    WANTED_DOCKER_PACKAGES="$(cat os_docker_packages.${DISTRIB_ID} 2>/dev/null | xargs -n1)";\
    WANTED_EXTRA_PACKAGES="$(cat os_extra_packages.${DISTRIB_ID} 2>/dev/null | xargs -n1)";\
    :;\
    if ((which which && which systemd) || \
         command -v systemd )>/dev/null 2>&1 \
       || [ -e /lib/systemd/systemd ];then \
      WANTED_PACKAGES="systemd dbus ${WANTED_PACKAGES}";\
    fi;\
    :;\
    WANTED_PACKAGES="${WANTED_PACKAGES} ${WANTED_DOCKER_PACKAGES}";\
    export WANTED_PACKAGES WANTED_EXTRA_PACKAGES;\
    set -e;\
    echo "packages: " $WANTED_PACKAGES >&2;\
    echo "extras: "$WANTED_EXTRA_PACKAGES >&2;\
    DO_INSTALL=y DO_UPGRADE=y DO_UPDATE=y SILENT=1 $COPS_ROOT/bin/cops_pkgmgr_install.sh'

ARG USE_VENV=no
# 2/ configure python & isolate virtualenv contruction
# the python diffs are to fix ipv6 error (cant bind address)
COPY hacking/patches/python*.diff \
     requirements/os_* \
     requirements/python_* \
     ${COPS_ROOT}/requirements/
COPY bin/silent_run $COPS_ROOT/bin/
RUN bash -c 'step_rev=3;cd $COPS_ROOT;\
    pos=;if [ -e /etc/redhat-release ];then pos=.rh;fi;\
    rhpyvers="36";pypkgs="";\
    if [ "x${pos}" = "x.rh" ];then \
        for i in ${rhpyvers};do pypkgs="$pypkgs python${i}u-test python${i}u-libs python${i}u-pip python${i}u-devel";done;\
        yum -y install https://centos7.iuscommunity.org/ius-release.rpm;\
    fi;\
    if [ "x${pypkgs}" != "x" ];then $COPS_ROOT/bin/cops_pkgmgr_install.sh $pypkgs;fi;\
    while read f;do \
        cd "$f";\
        pyver=3;\
        applypatch=;\
        if [ -e test/support/__init__.py ] \
        && grep -q "^    if socket.has_ipv6" test/support/__init__.py;then\
            applypatch=1;\
        fi;\
        p="$COPS_ROOT/requirements/python${pyver}${pos}.diff";\
        if [ "x${applypatch}" != "x" ];then\
            echo "Patching $f W $p" >&2;patch -fp4 < $p;\
        fi;\
    done < <(ls -d /usr/lib*/python3* 2>/dev/null);\
    while read f;do \
        cd "$f";\
        applypatch=;\
        pyver=2;\
        if [ -e test/test_support.py ] \
        && grep -q "^    if socket.has_ipv6" test/test_support.py;then\
            applypatch=1;\
        fi;\
        p="$COPS_ROOT/requirements/python${pyver}${pos}.diff";\
        if [ "x${applypatch}" != "x" ];then\
            echo "Patching $f W $p" >&2;patch -fp4 < $p;\
        fi;\
    done < <(ls -d /usr/lib*/python2* 2>/dev/null);\
    cd ${COPS_ROOT};\
    if [ "x$USE_VENV" != "xno" ];then \
     $_s virtualenv --system-site-packages --unzip-setuptools venv;\
     . venv/bin/activate;\
     :;\
     $_s python -c "from test import test_support";\
     $_s pip install -U pip;\
     $_s pip install -U -r requirements/python_requirements.txt; \
   fi'

# 3/ Run install script to finish installation
# We remove a package (git) to test the system install routines
COPY .corpusops ${COPS_ROOT}/.corpusops
COPY bin/install.sh bin/cops_shell_common ${COPS_ROOT}/bin/
COPY src ${COPS_ROOT}/src
COPY setup.py ${COPS_ROOT}/setup.py
RUN bash -c 'step_rev=2;set -e;cd ${COPS_ROOT};\
    bin/install.sh -C --skip-sync-code --use-venv $USE_VENV'

COPY bin/ ${COPS_ROOT}/bin/
COPY roles ${COPS_ROOT}/roles

# Now copy all rootfs helpers & make the container a good systemd / process
# manager citizen
COPY hacking/container_rootfs/ $COPS_ROOT/hacking/container_rootfs/
COPY hacking/sync_files $COPS_ROOT/hacking/
RUN bash -c 'step_rev=3;set -e;cd $COPS_ROOT;\
    $_s $COPS_ROOT/hacking/sync_files;\
    $_s rsync -a hacking/container_rootfs/ /;\
    $_s /sbin/cops_container_activate_core_services.sh;\
    $_s /sbin/cops_container_disable_networkifacesscripts.sh;'

# 4/ Bring in all rest of reepository
COPY .git ${COPS_ROOT}/.git
RUN bash -c 'step_rev=3;set -e;cd $COPS_ROOT;\
   : be sure every file is in place;\
   git reset --hard HEAD;\
   ln -sf $COPS_ROOT/roles/corpusops.roles/playbooks $COPS_ROOT/playbooks/corpusops;'

# Autoremove/reinstall gcc & git (can be overriden in children anyway)
# as those packages are way too heavy

# pack, cleanup, snapshot any found git repo
RUN bash -c 'step_rev=3;set -e;cd $COPS_ROOT;\
    : define DISTRIB_ID;. $COPS_ROOT/bin/cops_detect_os;\
    cd "$COPS_ROOT";\
    PKGS_REMOVES="gcc \
        $(cat req*/os_packages_dev.${DISTRIB_ID} \
          2>/dev/null | xargs -n1)" \
    DEV_AUTOREMOVE=y \
    GIT_SHALLOW=y \
    GIT_SHALLOW_DEPTH=1 \
    NO_IMAGE_STRIP= \
        /sbin/cops_container_strip.sh'

ENV ANSIBLE_FORCE_COLOR=true
ENV PYTHONUNBUFFERED $PYTHONUNBUFFERED
STOPSIGNAL SIGRTMIN+3
# You have to mount -v /sys/fs/cgroup:/sys/fs/cgroup:ro
CMD ["/entry_point"]
# vim:set et ft=Dockerfile:

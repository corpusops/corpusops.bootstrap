# For quickier rebuilds, we isolate each step of the installation
# and their requisites; together with docker cache

FROM debian:jessie
ENV container docker

ARG COPS_ROOT=/srv/corpusops/corpusops.bootstrap
ARG NO_OUTPUT=y
ARG USE_VENV=no
ARG PYTHONUNBUFFERED=1
ARG NONINTERACTIVE="y"
# ARG DEFAULT_A_VERBOSITY="-vvvvv -e cops_vars_debug=true"
ARG DEFAULT_A_VERBOSITY=""
ENV ANSIBLE_FORCE_COLOR=true
ENV PYTHONUNBUFFERED $PYTHONUNBUFFERED
ENV NONINTERACTIVE=$NONINTERACTIVE
ENV COPS_ROOT $COPS_ROOT
ENV A_VERBOSITY="$DEFAULT_A_VERBOSITY"
ENV _cops_ar "$COPS_ROOT/bin/cops_apply_role"
ENV _sapply_role "$COPS_ROOT/bin/silent_run $_cops_ar $A_VERBOSITY"
ENV _apply_role "$_cops_ar $A_VERBOSITY"
ENV _silent_run "$COPS_ROOT/bin/silent_run"
ENV _call_ansible=".ansible/scripts/call_ansible.sh $A_VERBOSITY"
ENV _call_roles=".ansible/scripts/call_roles.sh     $A_VERBOSITY"
# See https://github.com/nodejs/docker-node/issues/380
ARG GPG_KEYS=B42F6819007F00F88E364FD4036A9C25BF357DD4
ARG GPG_KEYS_SERVERS="hkp://p80.pool.sks-keyservers.net:80 hkp://ipv4.pool.sks-keyservers.net hkp://pgp.mit.edu:80"

# 1/ - Prebuild requirements & helpers,
#    - Make also life easier for systemd based containers
COPY requirements/os_* $COPS_ROOT/requirements/
COPY hacking/docker_toggle_pm $COPS_ROOT/hacking/
COPY bin/cops_detect_os bin/cops_pkgmgr_install.sh $COPS_ROOT/bin/
RUN bash -c 'step_rev=3;cd $COPS_ROOT/requirements;\
    :;\
    : define DISTRIB_ID;. $COPS_ROOT/bin/cops_detect_os;\
    WANTED_PACKAGES="$(cat os_packages.${DISTRIB_ID} \
                           os_packages_dev.${DISTRIB_ID} \
                           2>/dev/null | xargs -n1)";\
    WANTED_DOCKER_PACKAGES="$(cat os_docker_packages.${DISTRIB_ID} 2>/dev/null | xargs -n1)";\
    WANTED_EXTRA_PACKAGES="$(cat os_extra_packages.${DISTRIB_ID} 2>/dev/null | xargs -n1)";\
    :;\
    if ((which which && which systemd) \
       ||  command -v systemd )>/dev/null 2>&1 \
       || ( echo $DISTRIB_ID|egrep -iq debian ) \
       || ( [ -e /lib/systemd/system ]  && [ ! -e /lib/init/upstart-job ]; ) \
       || ( [ -e /lib/systemd/systemd ] && [ ! -e /lib/init/upstart-job ]; ) ;then \
      WANTED_PACKAGES="systemd dbus ${WANTED_PACKAGES}";\
      if  ( echo $DISTRIB_ID|egrep -iq "debian|ubuntu|mint"; );then \
        WANTED_PACKAGES="systemd-sysv ${WANTED_PACKAGES}"; \
      fi \
    fi;\
    :;\
    WANTED_PACKAGES="${WANTED_PACKAGES} ${WANTED_DOCKER_PACKAGES}";\
    export WANTED_PACKAGES WANTED_EXTRA_PACKAGES;\
    set -e;\
    echo "packages: " $WANTED_PACKAGES >&2;\
    echo "extras: "$WANTED_EXTRA_PACKAGES >&2;\
    DO_INSTALL=y DO_UPGRADE=y DO_UPDATE=y SILENT=1 \
      $COPS_ROOT/bin/cops_pkgmgr_install.sh'
RUN bash -c '\
    : install gosu \
    && : ::: \
    && mkdir /tmp/gosu && cd /tmp/gosu \
    && : :: gosu: search latest artefacts and SHA files \
    && arch=$( uname -m|sed -re "s/x86_64/amd64/g" ) \
    && : one keyserver may fail, try on multiple servers \
    && for k in $GPG_KEYS;do \
        touch /k_$k \
        && for s in $GPG_KEYS_SERVERS;do \
          if ( gpg -q --batch --keyserver $s --recv-keys $k );then \
            rm -f /k_$k && break;else echo "Keyserver failed: $s" >&2;fi;done \
        && if [ -e /k_$k ];then exit 1;fi \
       done \
    && urls="$( curl -s "https://api.github.com/repos/tianon/gosu/releases/latest" \
               | grep browser_download_url | cut -d "\"" -f 4\
               | egrep -i "sha|$arch"; )" \
    && : :: gosu: download artefacts \
    && while read u;do curl -sLO $u;done <<< "$urls" \
    && : :: gosu: integrity check \
    && for i in SHA256SUMS gosu-$arch;do gpg -q --batch --verify $i.asc $i &> /dev/null;done \
    && grep gosu-$arch SHA256SUMS | sha256sum -c - >/dev/null \
    && : :: gosu: filesystem install \
    && mv -f gosu-$arch /usr/bin/gosu \
    && chmod +x /usr/bin/gosu && cd / && rm -rf /tmp/gosu \
    && : ::: \
    && : "install https://github.com/jwilder/dockerize" \
    && : ::: \
    && mkdir /tmp/dockerize && cd /tmp/dockerize \
    && : :: dockerize: search latest artefacts and SHA files \
    && arch=$( uname -m|sed -re "s/x86_64/amd64/g" ) \
    && urls="$(curl -s \
        "https://api.github.com/repos/jwilder/dockerize/releases/latest" \
        | grep browser_download_url | cut -d "\"" -f 4\
        | ( if [ -e /etc/alpine-release ];then grep alpine;else grep -v alpine;fi; ) \
        | egrep -i "($(uname -s).*$arch|sha)" )" \
    && : :: dockerize: download and unpack artefacts \
    && while read u;do curl -sLO $u && tar -xf $(basename $u);done <<< "$urls" \
    && mv -f dockerize /usr/bin/dockerize \
    && chmod +x /usr/bin/dockerize && cd / && rm -rf /tmp/dockerize'

# 2/ configure python & isolate virtualenv contruction
# the python diffs are to fix ipv6 error (cant bind address)
COPY hacking/patches/python*.diff \
     requirements/os_* \
     ${COPS_ROOT}/requirements/
COPY bin/silent_run $COPS_ROOT/bin/
RUN bash -c 'step_rev=3;cd $COPS_ROOT;\
    pos=;if [ -e /etc/redhat-release ];then pos=.rh;fi;\
    rhpyvers="36";pypkgs="";\
    if [ "x${pos}" = "x.rh" ];then \
        for i in ${rhpyvers};do pypkgs="$pypkgs python${i}u-test python${i}u-libs python${i}u-pip python${i}u-devel";done;\
        yum -y install https://centos7.iuscommunity.org/ius-release.rpm;\
    fi;\
    if [ "x${pypkgs}" != "x" ];then $COPS_ROOT/bin/cops_pkgmgr_install.sh $pypkgs;fi;\
    while read f;do \
        cd "$f";\
        pyver=3;\
        applypatch=;\
        if [ -e test/support/__init__.py ] \
        && grep -q "^    if socket.has_ipv6" test/support/__init__.py;then\
            applypatch=1;\
        fi;\
        p="$COPS_ROOT/requirements/python${pyver}${pos}.diff";\
        if [ "x${applypatch}" != "x" ];then\
            echo "Patching $f W $p" >&2;patch -fp4 < $p;\
        fi;\
    done < <(ls -d /usr/lib*/python3* 2>/dev/null);\
    while read f;do \
        cd "$f";\
        applypatch=;\
        pyver=2;\
        if [ -e test/test_support.py ] \
        && grep -q "^    if socket.has_ipv6" test/test_support.py;then\
            applypatch=1;\
        fi;\
        p="$COPS_ROOT/requirements/python${pyver}${pos}.diff";\
        if [ "x${applypatch}" != "x" ];then\
            echo "Patching $f W $p" >&2;patch -fp4 < $p;\
        fi;\
    done < <(ls -d /usr/lib*/python2* 2>/dev/null);'

# 3/ Run install script to finish installation
# We remove a package (git) to test the system install routines
COPY .corpusops ${COPS_ROOT}/.corpusops
COPY requirements/python_* ${COPS_ROOT}/requirements/
COPY bin/install.sh bin/cops_shell_common ${COPS_ROOT}/bin/
COPY src ${COPS_ROOT}/src
COPY setup.py ${COPS_ROOT}/setup.py
RUN bash -c 'step_rev=2;set -e;cd ${COPS_ROOT};\
    bin/install.sh -C --skip-sync-code --use-venv $USE_VENV'

COPY bin/ ${COPS_ROOT}/bin/
COPY roles ${COPS_ROOT}/roles

# Now copy all rootfs helpers & make the container a good systemd / process
# manager citizen
COPY hacking/container_rootfs/ $COPS_ROOT/hacking/container_rootfs/
COPY hacking/sync_files $COPS_ROOT/hacking/
RUN bash -c 'step_rev=3;set -e;cd $COPS_ROOT;\
    VERBOSE=y $_silent_run $COPS_ROOT/hacking/sync_files;\
    VERBOSE=y $_silent_run rsync -a hacking/container_rootfs/ /;\
    VERBOSE=y $_silent_run /sbin/cops_container_activate_core_services.sh;\
    VERBOSE=y $_silent_run /sbin/cops_container_disable_networkifacesscripts.sh;'

# 4/ Bring in all rest of reepository
COPY .git ${COPS_ROOT}/.git
RUN bash -c 'step_rev=3;set -e;cd $COPS_ROOT;\
   : be sure every file is in place;\
   git reset --hard HEAD;\
   ln -sf $COPS_ROOT/roles/corpusops.roles/playbooks $COPS_ROOT/playbooks/corpusops;'

# Autoremove/reinstall gcc & git (can be overriden in children anyway)
# as those packages are way too heavy

# pack, cleanup, snapshot any found git repo
RUN bash -c 'step_rev=3;set -e;cd $COPS_ROOT;\
    : define DISTRIB_ID;. $COPS_ROOT/bin/cops_detect_os;\
    cd "$COPS_ROOT";\
    rm -f /etc/systemd/system/getty.target.wants/getty@tty1.service;\
    PKGS_REMOVES="gcc \
        $(cat req*/os_packages_dev.${DISTRIB_ID} \
          2>/dev/null | xargs -n1)" \
    DEV_AUTOREMOVE=y \
    GIT_SHALLOW=y \
    GIT_SHALLOW_DEPTH=1 \
    NO_IMAGE_STRIP= \
        /sbin/cops_container_strip.sh'

STOPSIGNAL SIGRTMIN+3
#  -v /sys/fs/cgroup:/sys/fs/cgroup:ro --tmpfs /run/lock --tmpfs /run
CMD ["/entry_point"]
# vim:set et ft=Dockerfile:
